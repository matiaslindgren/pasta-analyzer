[
{"title": "4.4.2. Additional Methods on Integer Types: int.bit_length", "url": "http://localhost:8000/library/stdtypes.html#int.bit_length", "code_snippets": ["n = -37\nbin(n)\n'-0b100101'\nn.bit_length()\n6\n\n", "def bit_length(self):\n    s = bin(self)       # binary representation:  bin(-37) --> '-0b100101'\n    s = s.lstrip('-0b') # remove leading zeros and minus sign\n    return len(s)       # len('100101') --> 6\n\n"]},
{"title": "2. Built-in Functions: all", "url": "http://localhost:8000/library/functions.html#all", "code_snippets": ["def all(iterable):\n    for element in iterable:\n        if not element:\n            return False\n    return True\n\n"]},
{"title": "2. Built-in Functions: any", "url": "http://localhost:8000/library/functions.html#any", "code_snippets": ["def any(iterable):\n    for element in iterable:\n        if element:\n            return True\n    return False\n\n"]},
{"title": "4.4.2. Additional Methods on Integer Types: int.to_bytes", "url": "http://localhost:8000/library/stdtypes.html#int.to_bytes", "code_snippets": ["(1024).to_bytes(2, byteorder='big')\nb'\\x04\\x00'\n(1024).to_bytes(10, byteorder='big')\nb'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00'\n(-1024).to_bytes(10, byteorder='big', signed=True)\nb'\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfc\\x00'\nx = 1000\nx.to_bytes((x.bit_length() + 7) // 8, byteorder='little')\nb'\\xe8\\x03'\n\n"]},
{"title": "4.4.2. Additional Methods on Integer Types: int.from_bytes", "url": "http://localhost:8000/library/stdtypes.html#int.from_bytes", "code_snippets": ["int.from_bytes(b'\\x00\\x10', byteorder='big')\n16\nint.from_bytes(b'\\x00\\x10', byteorder='little')\n4096\nint.from_bytes(b'\\xfc\\x00', byteorder='big', signed=True)\n-1024\nint.from_bytes(b'\\xfc\\x00', byteorder='big', signed=False)\n64512\nint.from_bytes([255, 0, 0], byteorder='big')\n16711680\n\n"]},
{"title": "4.4.3. Additional Methods on Float: float.is_integer", "url": "http://localhost:8000/library/stdtypes.html#float.is_integer", "code_snippets": ["(-2.0).is_integer()\nTrue\n(3.2).is_integer()\nFalse\n\n"]},
{"title": "2. Built-in Functions: dir", "url": "http://localhost:8000/library/functions.html#dir", "code_snippets": ["import struct\ndir()   # show the names in the module namespace\n['__builtins__', '__name__', 'struct']\ndir(struct)   # show the names in the struct module \n['Struct', '__all__', '__builtins__', '__cached__', '__doc__', '__file__',\n '__initializing__', '__loader__', '__name__', '__package__',\n '_clearcache', 'calcsize', 'error', 'pack', 'pack_into',\n 'unpack', 'unpack_from']\nclass Shape:\n    def __dir__(self):\n        return ['area', 'perimeter', 'location']\ns = Shape()\ndir(s)\n['area', 'location', 'perimeter']\n\n"]},
{"title": "2. Built-in Functions: enumerate", "url": "http://localhost:8000/library/functions.html#enumerate", "code_snippets": ["seasons = ['Spring', 'Summer', 'Fall', 'Winter']\nlist(enumerate(seasons))\n[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]\nlist(enumerate(seasons, start=1))\n[(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]\n\n", "def enumerate(sequence, start=0):\n    n = start\n    for elem in sequence:\n        yield n, elem\n        n += 1\n\n"]},
{"title": "2. Built-in Functions: eval", "url": "http://localhost:8000/library/functions.html#eval", "code_snippets": ["x = 1\neval('x+1')\n2\n\n"]},
{"title": "4.6.6. Ranges: range", "url": "http://localhost:8000/library/stdtypes.html#range", "code_snippets": ["list(range(10))\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist(range(1, 11))\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlist(range(0, 30, 5))\n[0, 5, 10, 15, 20, 25]\nlist(range(0, 10, 3))\n[0, 3, 6, 9]\nlist(range(0, -10, -1))\n[0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\nlist(range(0))\n[]\nlist(range(1, 0))\n[]\n\n"]},
{"title": "2. Built-in Functions: float", "url": "http://localhost:8000/library/functions.html#float", "code_snippets": ["float('+1.23')\n1.23\nfloat('   -12345\\n')\n-12345.0\nfloat('1e-003')\n0.001\nfloat('+1E6')\n1000000.0\nfloat('-Infinity')\n-inf\n\n"]},
{"title": "4.7.1. String Methods: str.expandtabs", "url": "http://localhost:8000/library/stdtypes.html#str.expandtabs", "code_snippets": ["'01\\t012\\t0123\\t01234'.expandtabs()\n'01      012     0123    01234'\n'01\\t012\\t0123\\t01234'.expandtabs(4)\n'01  012 0123    01234'\n\n"]},
{"title": "4.7.1. String Methods: str.format", "url": "http://localhost:8000/library/stdtypes.html#str.format", "code_snippets": ["\"The sum of 1 + 2 is {0}\".format(1+2)\n'The sum of 1 + 2 is 3'\n\n"]},
{"title": "2. Built-in Functions: hex", "url": "http://localhost:8000/library/functions.html#hex", "code_snippets": ["hex(255)\n'0xff'\nhex(-42)\n'-0x2a'\n\n"]},
{"title": "4.7.1. String Methods: str.format_map", "url": "http://localhost:8000/library/stdtypes.html#str.format_map", "code_snippets": ["class Default(dict):\n    def __missing__(self, key):\n        return key\n\n'{name} was born in {country}'.format_map(Default(name='Guido'))\n'Guido was born in country'\n\n"]},
{"title": "2. Built-in Functions: iter", "url": "http://localhost:8000/library/functions.html#iter", "code_snippets": ["with open('mydata.txt') as fp:\n    for line in iter(fp.readline, ''):\n        process_line(line)\n\n"]},
{"title": "4.7.1. String Methods: str.lstrip", "url": "http://localhost:8000/library/stdtypes.html#str.lstrip", "code_snippets": ["'   spacious   '.lstrip()\n'spacious   '\n'www.example.com'.lstrip('cmowz.')\n'example.com'\n\n"]},
{"title": "2. Built-in Functions: open", "url": "http://localhost:8000/library/functions.html#open", "code_snippets": ["import os\ndir_fd = os.open('somedir', os.O_RDONLY)\ndef opener(path, flags):\n    return os.open(path, flags, dir_fd=dir_fd)\n\nwith open('spamspam.txt', 'w', opener=opener) as f:\n    print('This will be written to somedir/spamspam.txt', file=f)\n\nos.close(dir_fd)  # don't leak a file descriptor\n\n"]},
{"title": "2. Built-in Functions: property", "url": "http://localhost:8000/library/functions.html#property", "code_snippets": ["class C:\n    def __init__(self):\n        self._x = None\n\n    def getx(self):\n        return self._x\n\n    def setx(self, value):\n        self._x = value\n\n    def delx(self):\n        del self._x\n\n    x = property(getx, setx, delx, \"I'm the 'x' property.\")\n\n", "class Parrot:\n    def __init__(self):\n        self._voltage = 100000\n\n    @property\n    def voltage(self):\n        \"\"\"Get the current voltage.\"\"\"\n        return self._voltage\n\n", "class C:\n    def __init__(self):\n        self._x = None\n\n    @property\n    def x(self):\n        \"\"\"I'm the 'x' property.\"\"\"\n        return self._x\n\n    @x.setter\n    def x(self, value):\n        self._x = value\n\n    @x.deleter\n    def x(self):\n        del self._x\n\n"]},
{"title": "4.7.1. String Methods: str.rstrip", "url": "http://localhost:8000/library/stdtypes.html#str.rstrip", "code_snippets": ["'   spacious   '.rstrip()\n'   spacious'\n'mississippi'.rstrip('ipz')\n'mississ'\n\n"]},
{"title": "4.7.1. String Methods: str.split", "url": "http://localhost:8000/library/stdtypes.html#str.split", "code_snippets": ["'1,2,3'.split(',')\n['1', '2', '3']\n'1,2,3'.split(',', maxsplit=1)\n['1', '2,3']\n'1,2,,3,'.split(',')\n['1', '2', '', '3', '']\n\n", "'1 2 3'.split()\n['1', '2', '3']\n'1 2 3'.split(maxsplit=1)\n['1', '2 3']\n'   1   2   3   '.split()\n['1', '2', '3']\n\n"]},
{"title": "4.7.1. String Methods: str.splitlines", "url": "http://localhost:8000/library/stdtypes.html#str.splitlines", "code_snippets": ["'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines()\n['ab c', '', 'de fg', 'kl']\n'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines(keepends=True)\n['ab c\\n', '\\n', 'de fg\\r', 'kl\\r\\n']\n\n", "\"\".splitlines()\n[]\n\"One line\\n\".splitlines()\n['One line']\n\n", "''.split('\\n')\n['']\n'Two lines\\n'.split('\\n')\n['Two lines', '']\n\n"]},
{"title": "4.7.1. String Methods: str.strip", "url": "http://localhost:8000/library/stdtypes.html#str.strip", "code_snippets": ["'   spacious   '.strip()\n'spacious'\n'www.example.com'.strip('cmowz.')\n'example'\n\n", "comment_string = '#....... Section 3.2.1 Issue #32 .......'\ncomment_string.strip('.#! ')\n'Section 3.2.1 Issue #32'\n\n"]},
{"title": "2. Built-in Functions: super", "url": "http://localhost:8000/library/functions.html#super", "code_snippets": ["class C(B):\n    def method(self, arg):\n        super().method(arg)    # This does the same thing as:\n                               # super(C, self).method(arg)\n\n"]},
{"title": "21.4.1. : wsgiref.util.setup_testing_defaults", "url": "http://localhost:8000/library/wsgiref.html#wsgiref.util.setup_testing_defaults", "code_snippets": ["from wsgiref.util import setup_testing_defaults\nfrom wsgiref.simple_server import make_server\n\n# A relatively simple WSGI application. It's going to print out the\n# environment dictionary after being updated by setup_testing_defaults\ndef simple_app(environ, start_response):\n    setup_testing_defaults(environ)\n\n    status = '200 OK'\n    headers = [('Content-type', 'text/plain; charset=utf-8')]\n\n    start_response(status, headers)\n\n    ret = [(\"%s: %s\\n\" % (key, value)).encode(\"utf-8\")\n           for key, value in environ.items()]\n    return ret\n\nwith make_server('', 8000, simple_app) as httpd:\n    print(\"Serving on port 8000...\")\n    httpd.serve_forever()\n\n"]},
{"title": "4.7.1. String Methods: str.title", "url": "http://localhost:8000/library/stdtypes.html#str.title", "code_snippets": ["'Hello world'.title()\n'Hello World'\n\n", "\"they're bill's friends from the UK\".title()\n\"They'Re Bill'S Friends From The Uk\"\n\n", "import re\ndef titlecase(s):\n    return re.sub(r\"[A-Za-z]+('[A-Za-z]+)?\",\n                  lambda mo: mo.group(0)[0].upper() +\n                             mo.group(0)[1:].lower(),\n                  s)\n\ntitlecase(\"they're bill's friends.\")\n\"They're Bill's Friends.\"\n\n"]},
{"title": "2. Built-in Functions: type", "url": "http://localhost:8000/library/functions.html#type", "code_snippets": ["class X:\n    a = 1\n\nX = type('X', (object,), dict(a=1))\n\n"]},
{"title": "2. Built-in Functions: zip", "url": "http://localhost:8000/library/functions.html#zip", "code_snippets": ["def zip(*iterables):\n    # zip('ABCD', 'xy') --> Ax By\n    sentinel = object()\n    iterators = [iter(it) for it in iterables]\n    while iterators:\n        result = []\n        for it in iterators:\n            elem = next(it, sentinel)\n            if elem is sentinel:\n                return\n            result.append(elem)\n        yield tuple(result)\n\n", "x = [1, 2, 3]\ny = [4, 5, 6]\nzipped = zip(x, y)\nlist(zipped)\n[(1, 4), (2, 5), (3, 6)]\nx2, y2 = zip(*zip(x, y))\nx == list(x2) and y == list(y2)\nTrue\n\n"]},
{"title": "21.4.1. : wsgiref.util.FileWrapper", "url": "http://localhost:8000/library/wsgiref.html#wsgiref.util.FileWrapper", "code_snippets": ["from io import StringIO\nfrom wsgiref.util import FileWrapper\n\n# We're using a StringIO-buffer for as the file-like object\nfilelike = StringIO(\"This is an example file-like object\"*10)\nwrapper = FileWrapper(filelike, blksize=5)\n\nfor chunk in wrapper:\n    print(chunk)\n\n"]},
{"title": "21.4.3. : wsgiref.simple_server.make_server", "url": "http://localhost:8000/library/wsgiref.html#wsgiref.simple_server.make_server", "code_snippets": ["from wsgiref.simple_server import make_server, demo_app\n\nwith make_server('', 8000, demo_app) as httpd:\n    print(\"Serving HTTP on port 8000...\")\n\n    # Respond to requests until process is killed\n    httpd.serve_forever()\n\n    # Alternative: serve one request, then exit\n    httpd.handle_request()\n\n"]},
{"title": "4.7.1. String Methods: str.zfill", "url": "http://localhost:8000/library/stdtypes.html#str.zfill", "code_snippets": ["\"42\".zfill(5)\n'00042'\n\"-42\".zfill(5)\n'-0042'\n\n"]},
{"title": "4.7. Text Sequence Type \u2014 : str", "url": "http://localhost:8000/library/stdtypes.html#str", "code_snippets": ["str(b'Zoot!')\n\"b'Zoot!'\"\n\n"]},
{"title": "4.8.1. Bytes: bytes.fromhex", "url": "http://localhost:8000/library/stdtypes.html#bytes.fromhex", "code_snippets": ["bytes.fromhex('2Ef0 F1f2  ')\nb'.\\xf0\\xf1\\xf2'\n\n"]},
{"title": "21.28.1. Convenience factory functions: ipaddress.ip_address", "url": "http://localhost:8000/library/ipaddress.html#ipaddress.ip_address", "code_snippets": ["ipaddress.ip_address('192.168.0.1')\nIPv4Address('192.168.0.1')\nipaddress.ip_address('2001:db8::')\nIPv6Address('2001:db8::')\n\n"]},
{"title": "2. Built-in Functions: __import__", "url": "http://localhost:8000/library/functions.html#__import__", "code_snippets": ["spam = __import__('spam', globals(), locals(), [], 0)\n\n", "spam = __import__('spam.ham', globals(), locals(), [], 0)\n\n", "_temp = __import__('spam.ham', globals(), locals(), ['eggs', 'sausage'], 0)\neggs = _temp.eggs\nsaus = _temp.sausage\n\n"]},
{"title": "21.4.4. : wsgiref.validate.validator", "url": "http://localhost:8000/library/wsgiref.html#wsgiref.validate.validator", "code_snippets": ["from wsgiref.validate import validator\nfrom wsgiref.simple_server import make_server\n\n# Our callable object which is intentionally not compliant to the\n# standard, so the validator is going to break\ndef simple_app(environ, start_response):\n    status = '200 OK'  # HTTP Status\n    headers = [('Content-type', 'text/plain')]  # HTTP Headers\n    start_response(status, headers)\n\n    # This is going to break because we need to return a list, and\n    # the validator is going to inform us\n    return b\"Hello World\"\n\n# This is the application wrapped in a validator\nvalidator_app = validator(simple_app)\n\nwith make_server('', 8000, validator_app) as httpd:\n    print(\"Listening on port 8000....\")\n    httpd.serve_forever()\n\n"]},
{"title": "4.8.1. Bytes: bytes.hex", "url": "http://localhost:8000/library/stdtypes.html#bytes.hex", "code_snippets": ["b'\\xf0\\xf1\\xf2'.hex()\n'f0f1f2'\n\n"]},
{"title": "4.8.2. Bytearray Objects: bytearray.fromhex", "url": "http://localhost:8000/library/stdtypes.html#bytearray.fromhex", "code_snippets": ["bytearray.fromhex('2Ef0 F1f2  ')\nbytearray(b'.\\xf0\\xf1\\xf2')\n\n"]},
{"title": "4.8.2. Bytearray Objects: bytearray.hex", "url": "http://localhost:8000/library/stdtypes.html#bytearray.hex", "code_snippets": ["bytearray(b'\\xf0\\xf1\\xf2').hex()\n'f0f1f2'\n\n"]},
{"title": "29.11. : gc.is_tracked", "url": "http://localhost:8000/library/gc.html#gc.is_tracked", "code_snippets": ["gc.is_tracked(0)\nFalse\ngc.is_tracked(\"a\")\nFalse\ngc.is_tracked([])\nTrue\ngc.is_tracked({})\nFalse\ngc.is_tracked({\"a\": 1})\nFalse\ngc.is_tracked({\"a\": []})\nTrue\n\n"]},
{"title": "21.28.1. Convenience factory functions: ipaddress.ip_network", "url": "http://localhost:8000/library/ipaddress.html#ipaddress.ip_network", "code_snippets": ["ipaddress.ip_network('192.168.0.0/28')\nIPv4Network('192.168.0.0/28')\n\n"]},
{"title": "21.28.2.1. Address objects: ipaddress.IPv4Address", "url": "http://localhost:8000/library/ipaddress.html#ipaddress.IPv4Address", "code_snippets": ["ipaddress.IPv4Address('192.168.0.1')\nIPv4Address('192.168.0.1')\nipaddress.IPv4Address(3232235521)\nIPv4Address('192.168.0.1')\nipaddress.IPv4Address(b'\\xC0\\xA8\\x00\\x01')\nIPv4Address('192.168.0.1')\n\n"]},
{"title": "21.28.2.1. Address objects: ipaddress.IPv6Address", "url": "http://localhost:8000/library/ipaddress.html#ipaddress.IPv6Address", "code_snippets": ["ipaddress.IPv6Address('2001:db8::1000')\nIPv6Address('2001:db8::1000')\n\n"]},
{"title": "29.12.1. Types and members: inspect.isawaitable", "url": "http://localhost:8000/library/inspect.html#inspect.isawaitable", "code_snippets": ["def gen():\n    yield\n@types.coroutine\ndef gen_coro():\n    yield\n\nassert not isawaitable(gen())\nassert isawaitable(gen_coro())\n\n"]},
{"title": "29.12.1. Types and members: inspect.isasyncgenfunction", "url": "http://localhost:8000/library/inspect.html#inspect.isasyncgenfunction", "code_snippets": ["async def agen():\n    yield 1\n\ninspect.isasyncgenfunction(agen)\nTrue\n\n"]},
{"title": "10.3. : operator.attrgetter", "url": "http://localhost:8000/library/operator.html#operator.attrgetter", "code_snippets": ["def attrgetter(*items):\n    if any(not isinstance(item, str) for item in items):\n        raise TypeError('attribute name must be a string')\n    if len(items) == 1:\n        attr = items[0]\n        def g(obj):\n            return resolve_attr(obj, attr)\n    else:\n        def g(obj):\n            return tuple(resolve_attr(obj, attr) for attr in items)\n    return g\n\ndef resolve_attr(obj, attr):\n    for name in attr.split(\".\"):\n        obj = getattr(obj, name)\n    return obj\n\n"]},
{"title": "4.8.3. Bytes and Bytearray Operations: bytes.translate", "url": "http://localhost:8000/library/stdtypes.html#bytes.translate", "code_snippets": ["b'read this short text'.translate(None, b'aeiou')\nb'rd ths shrt txt'\n\n"]},
{"title": "21.28.5. Other Module Level Functions: ipaddress.v4_int_to_packed", "url": "http://localhost:8000/library/ipaddress.html#ipaddress.v4_int_to_packed", "code_snippets": ["ipaddress.ip_address(3221225985)\nIPv4Address('192.0.2.1')\nipaddress.v4_int_to_packed(3221225985)\nb'\\xc0\\x00\\x02\\x01'\n\n"]},
{"title": "10.3. : operator.itemgetter", "url": "http://localhost:8000/library/operator.html#operator.itemgetter", "code_snippets": ["def itemgetter(*items):\n    if len(items) == 1:\n        item = items[0]\n        def g(obj):\n            return obj[item]\n    else:\n        def g(obj):\n            return tuple(obj[item] for item in items)\n    return g\n\n", "itemgetter(1)('ABCDEFG')\n'B'\nitemgetter(1,3,5)('ABCDEFG')\n('B', 'D', 'F')\nitemgetter(slice(2,None))('ABCDEFG')\n'CDEFG'\n\n", "inventory = [('apple', 3), ('banana', 2), ('pear', 5), ('orange', 1)]\ngetcount = itemgetter(1)\nlist(map(getcount, inventory))\n[3, 2, 5, 1]\nsorted(inventory, key=getcount)\n[('orange', 1), ('banana', 2), ('apple', 3), ('pear', 5)]\n\n"]},
{"title": "4.8.3. Bytes and Bytearray Operations: bytes.lstrip", "url": "http://localhost:8000/library/stdtypes.html#bytes.lstrip", "code_snippets": ["b'   spacious   '.lstrip()\nb'spacious   '\nb'www.example.com'.lstrip(b'cmowz.')\nb'example.com'\n\n"]},
{"title": "4.8.3. Bytes and Bytearray Operations: bytes.rstrip", "url": "http://localhost:8000/library/stdtypes.html#bytes.rstrip", "code_snippets": ["b'   spacious   '.rstrip()\nb'   spacious'\nb'mississippi'.rstrip(b'ipz')\nb'mississ'\n\n"]},
{"title": "21.28.5. Other Module Level Functions: ipaddress.summarize_address_range", "url": "http://localhost:8000/library/ipaddress.html#ipaddress.summarize_address_range", "code_snippets": ["[ipaddr for ipaddr in ipaddress.summarize_address_range(\n   ipaddress.IPv4Address('192.0.2.0'),\n   ipaddress.IPv4Address('192.0.2.130'))]\n[IPv4Network('192.0.2.0/25'), IPv4Network('192.0.2.128/31'), IPv4Network('192.0.2.130/32')]\n\n"]},
{"title": "21.28.5. Other Module Level Functions: ipaddress.collapse_addresses", "url": "http://localhost:8000/library/ipaddress.html#ipaddress.collapse_addresses", "code_snippets": ["[ipaddr for ipaddr in\nipaddress.collapse_addresses([ipaddress.IPv4Network('192.0.2.0/25'),\nipaddress.IPv4Network('192.0.2.128/25')])]\n[IPv4Network('192.0.2.0/24')]\n\n"]},
{"title": "10.3. : operator.methodcaller", "url": "http://localhost:8000/library/operator.html#operator.methodcaller", "code_snippets": ["def methodcaller(name, *args, **kwargs):\n    def caller(obj):\n        return getattr(obj, name)(*args, **kwargs)\n    return caller\n\n"]},
{"title": "4.8.3. Bytes and Bytearray Operations: bytes.split", "url": "http://localhost:8000/library/stdtypes.html#bytes.split", "code_snippets": ["b'1,2,3'.split(b',')\n[b'1', b'2', b'3']\nb'1,2,3'.split(b',', maxsplit=1)\n[b'1', b'2,3']\nb'1,2,,3,'.split(b',')\n[b'1', b'2', b'', b'3', b'']\n\n", "b'1 2 3'.split()\n[b'1', b'2', b'3']\nb'1 2 3'.split(maxsplit=1)\n[b'1', b'2 3']\nb'   1   2   3   '.split()\n[b'1', b'2', b'3']\n\n"]},
{"title": "4.8.3. Bytes and Bytearray Operations: bytes.strip", "url": "http://localhost:8000/library/stdtypes.html#bytes.strip", "code_snippets": ["b'   spacious   '.strip()\nb'spacious'\nb'www.example.com'.strip(b'cmowz.')\nb'example'\n\n"]},
{"title": "21.28.5. Other Module Level Functions: ipaddress.get_mixed_type_key", "url": "http://localhost:8000/library/ipaddress.html#ipaddress.get_mixed_type_key", "code_snippets": ["IPv4Address('192.0.2.0') <= IPv4Network('192.0.2.0/24')\n\n"]},
{"title": "4.8.3. Bytes and Bytearray Operations: bytes.expandtabs", "url": "http://localhost:8000/library/stdtypes.html#bytes.expandtabs", "code_snippets": ["b'01\\t012\\t0123\\t01234'.expandtabs()\nb'01      012     0123    01234'\nb'01\\t012\\t0123\\t01234'.expandtabs(4)\nb'01  012 0123    01234'\n\n"]},
{"title": "4.8.3. Bytes and Bytearray Operations: bytes.isalnum", "url": "http://localhost:8000/library/stdtypes.html#bytes.isalnum", "code_snippets": ["b'ABCabc1'.isalnum()\nTrue\nb'ABC abc1'.isalnum()\nFalse\n\n"]},
{"title": "4.8.3. Bytes and Bytearray Operations: bytes.isalpha", "url": "http://localhost:8000/library/stdtypes.html#bytes.isalpha", "code_snippets": ["b'ABCabc'.isalpha()\nTrue\nb'ABCabc1'.isalpha()\nFalse\n\n"]},
{"title": "4.8.3. Bytes and Bytearray Operations: bytes.isdigit", "url": "http://localhost:8000/library/stdtypes.html#bytes.isdigit", "code_snippets": ["b'1234'.isdigit()\nTrue\nb'1.23'.isdigit()\nFalse\n\n"]},
{"title": "4.8.3. Bytes and Bytearray Operations: bytes.islower", "url": "http://localhost:8000/library/stdtypes.html#bytes.islower", "code_snippets": ["b'hello world'.islower()\nTrue\nb'Hello world'.islower()\nFalse\n\n"]},
{"title": "4.8.3. Bytes and Bytearray Operations: bytes.istitle", "url": "http://localhost:8000/library/stdtypes.html#bytes.istitle", "code_snippets": ["b'Hello World'.istitle()\nTrue\nb'Hello world'.istitle()\nFalse\n\n"]},
{"title": "24.3. : shlex.quote", "url": "http://localhost:8000/library/shlex.html#shlex.quote", "code_snippets": ["remote_command = split(remote_command)\nremote_command\n['ssh', 'home', \"ls -l 'somefile; rm -rf ~'\"]\ncommand = split(remote_command[-1])\ncommand\n['ls', '-l', 'somefile; rm -rf ~']\n\n"]},
{"title": "29.12.4. Classes and functions: inspect.formatargspec", "url": "http://localhost:8000/library/inspect.html#inspect.formatargspec", "code_snippets": ["from inspect import formatargspec, getfullargspec\ndef f(a: int, b: float):\n    pass\n\nformatargspec(*getfullargspec(f))\n'(a: int, b: float)'\n\n"]},
{"title": "24.1.3.1. Turtle motion: turtle.forward", "url": "http://localhost:8000/library/turtle.html#turtle.forward", "code_snippets": ["turtle.position()\n(0.00,0.00)\nturtle.forward(25)\nturtle.position()\n(25.00,0.00)\nturtle.forward(-75)\nturtle.position()\n(-50.00,0.00)\n\n"]},
{"title": "4.8.3. Bytes and Bytearray Operations: bytes.isupper", "url": "http://localhost:8000/library/stdtypes.html#bytes.isupper", "code_snippets": ["b'HELLO WORLD'.isupper()\nTrue\nb'Hello world'.isupper()\nFalse\n\n"]},
{"title": "4.8.3. Bytes and Bytearray Operations: bytes.lower", "url": "http://localhost:8000/library/stdtypes.html#bytes.lower", "code_snippets": ["b'Hello World'.lower()\nb'hello world'\n\n"]},
{"title": "4.8.3. Bytes and Bytearray Operations: bytes.splitlines", "url": "http://localhost:8000/library/stdtypes.html#bytes.splitlines", "code_snippets": ["b'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines()\n[b'ab c', b'', b'de fg', b'kl']\nb'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines(keepends=True)\n[b'ab c\\n', b'\\n', b'de fg\\r', b'kl\\r\\n']\n\n", "b\"\".split(b'\\n'), b\"Two lines\\n\".split(b'\\n')\n([b''], [b'Two lines', b''])\nb\"\".splitlines(), b\"One line\\n\".splitlines()\n([], [b'One line'])\n\n"]},
{"title": "24.1.3.1. Turtle motion: turtle.back", "url": "http://localhost:8000/library/turtle.html#turtle.back", "code_snippets": ["turtle.position()\n(0.00,0.00)\nturtle.backward(30)\nturtle.position()\n(-30.00,0.00)\n\n"]},
{"title": "24.1.3.1. Turtle motion: turtle.right", "url": "http://localhost:8000/library/turtle.html#turtle.right", "code_snippets": ["turtle.heading()\n22.0\nturtle.right(45)\nturtle.heading()\n337.0\n\n"]},
{"title": "24.1.3.1. Turtle motion: turtle.left", "url": "http://localhost:8000/library/turtle.html#turtle.left", "code_snippets": ["turtle.heading()\n22.0\nturtle.left(45)\nturtle.heading()\n67.0\n\n"]},
{"title": "4.8.3. Bytes and Bytearray Operations: bytes.swapcase", "url": "http://localhost:8000/library/stdtypes.html#bytes.swapcase", "code_snippets": ["b'Hello World'.swapcase()\nb'hELLO wORLD'\n\n"]},
{"title": "4.8.3. Bytes and Bytearray Operations: bytes.title", "url": "http://localhost:8000/library/stdtypes.html#bytes.title", "code_snippets": ["b'Hello world'.title()\nb'Hello World'\n\n", "b\"they're bill's friends from the UK\".title()\nb\"They'Re Bill'S Friends From The Uk\"\n\n", "import re\ndef titlecase(s):\n    return re.sub(rb\"[A-Za-z]+('[A-Za-z]+)?\",\n                  lambda mo: mo.group(0)[0:1].upper() +\n                             mo.group(0)[1:].lower(),\n                  s)\n\ntitlecase(b\"they're bill's friends.\")\nb\"They're Bill's Friends.\"\n\n"]},
{"title": "24.1.3.1. Turtle motion: turtle.goto", "url": "http://localhost:8000/library/turtle.html#turtle.goto", "code_snippets": ["tp = turtle.pos()\ntp\n(0.00,0.00)\nturtle.setpos(60,30)\nturtle.pos()\n(60.00,30.00)\nturtle.setpos((20,80))\nturtle.pos()\n(20.00,80.00)\nturtle.setpos(tp)\nturtle.pos()\n(0.00,0.00)\n\n"]},
{"title": "24.1.3.1. Turtle motion: turtle.setx", "url": "http://localhost:8000/library/turtle.html#turtle.setx", "code_snippets": ["turtle.position()\n(0.00,240.00)\nturtle.setx(10)\nturtle.position()\n(10.00,240.00)\n\n"]},
{"title": "4.8.3. Bytes and Bytearray Operations: bytes.upper", "url": "http://localhost:8000/library/stdtypes.html#bytes.upper", "code_snippets": ["b'Hello World'.upper()\nb'HELLO WORLD'\n\n"]},
{"title": "4.8.3. Bytes and Bytearray Operations: bytes.zfill", "url": "http://localhost:8000/library/stdtypes.html#bytes.zfill", "code_snippets": ["b\"42\".zfill(5)\nb'00042'\nb\"-42\".zfill(5)\nb'-0042'\n\n"]},
{"title": "4.8.5. Memory Views: memoryview", "url": "http://localhost:8000/library/stdtypes.html#memoryview", "code_snippets": ["import array\na = array.array('l', [-11111111, 22222222, -33333333, 44444444])\nm = memoryview(a)\nm[0]\n-11111111\nm[-1]\n44444444\nm[::2].tolist()\n[-11111111, -33333333]\n\n", "v = memoryview(b'abcefg')\nhash(v) == hash(b'abcefg')\nTrue\nhash(v[2:4]) == hash(b'ce')\nTrue\nhash(v[::-2]) == hash(b'abcefg'[::-2])\nTrue\n\n"]},
{"title": "24.1.3.1. Turtle motion: turtle.sety", "url": "http://localhost:8000/library/turtle.html#turtle.sety", "code_snippets": ["turtle.position()\n(0.00,40.00)\nturtle.sety(-10)\nturtle.position()\n(0.00,-10.00)\n\n"]},
{"title": "24.1.3.1. Turtle motion: turtle.setheading", "url": "http://localhost:8000/library/turtle.html#turtle.setheading", "code_snippets": ["turtle.setheading(90)\nturtle.heading()\n90.0\n\n"]},
{"title": "24.1.3.1. Turtle motion: turtle.home", "url": "http://localhost:8000/library/turtle.html#turtle.home", "code_snippets": ["turtle.heading()\n90.0\nturtle.position()\n(0.00,-10.00)\nturtle.home()\nturtle.position()\n(0.00,0.00)\nturtle.heading()\n0.0\n\n"]},
{"title": "16.4.5.1. Sub-commands: argparse.ArgumentParser.add_subparsers", "url": "http://localhost:8000/library/argparse.html#argparse.ArgumentParser.add_subparsers", "code_snippets": ["# create the top-level parser\nparser = argparse.ArgumentParser(prog='PROG')\nparser.add_argument('--foo', action='store_true', help='foo help')\nsubparsers = parser.add_subparsers(help='sub-command help')\n\n# create the parser for the \"a\" command\nparser_a = subparsers.add_parser('a', help='a help')\nparser_a.add_argument('bar', type=int, help='bar help')\n\n# create the parser for the \"b\" command\nparser_b = subparsers.add_parser('b', help='b help')\nparser_b.add_argument('--baz', choices='XYZ', help='baz help')\n\n# parse some argument lists\nparser.parse_args(['a', '12'])\nNamespace(bar=12, foo=False)\nparser.parse_args(['--foo', 'b', '--baz', 'Z'])\nNamespace(baz='Z', foo=True)\n\n", "parser = argparse.ArgumentParser()\nsubparsers = parser.add_subparsers()\ncheckout = subparsers.add_parser('checkout', aliases=['co'])\ncheckout.add_argument('foo')\nparser.parse_args(['co', 'bar'])\nNamespace(foo='bar')\n\n", "# sub-command functions\ndef foo(args):\n    print(args.x * args.y)\n\ndef bar(args):\n    print('((%s))' % args.z)\n\n# create the top-level parser\nparser = argparse.ArgumentParser()\nsubparsers = parser.add_subparsers()\n\n# create the parser for the \"foo\" command\nparser_foo = subparsers.add_parser('foo')\nparser_foo.add_argument('-x', type=int, default=1)\nparser_foo.add_argument('y', type=float)\nparser_foo.set_defaults(func=foo)\n\n# create the parser for the \"bar\" command\nparser_bar = subparsers.add_parser('bar')\nparser_bar.add_argument('z')\nparser_bar.set_defaults(func=bar)\n\n# parse the args and call whatever function was selected\nargs = parser.parse_args('foo 1 -x 2'.split())\nargs.func(args)\n2.0\n\n# parse the args and call whatever function was selected\nargs = parser.parse_args('bar XYZYX'.split())\nargs.func(args)\n((XYZYX))\n\n", "parser = argparse.ArgumentParser()\nsubparsers = parser.add_subparsers(dest='subparser_name')\nsubparser1 = subparsers.add_parser('1')\nsubparser1.add_argument('-x')\nsubparser2 = subparsers.add_parser('2')\nsubparser2.add_argument('y')\nparser.parse_args(['2', 'frobble'])\nNamespace(subparser_name='2', y='frobble')\n\n"]},
{"title": "24.1.3.1. Turtle motion: turtle.circle", "url": "http://localhost:8000/library/turtle.html#turtle.circle", "code_snippets": ["turtle.home()\nturtle.position()\n(0.00,0.00)\nturtle.heading()\n0.0\nturtle.circle(50)\nturtle.position()\n(-0.00,0.00)\nturtle.heading()\n0.0\nturtle.circle(120, 180)  # draw a semicircle\nturtle.position()\n(0.00,240.00)\nturtle.heading()\n180.0\n\n"]},
{"title": "24.1.3.1. Turtle motion: turtle.dot", "url": "http://localhost:8000/library/turtle.html#turtle.dot", "code_snippets": ["turtle.home()\nturtle.dot()\nturtle.fd(50); turtle.dot(20, \"blue\"); turtle.fd(50)\nturtle.position()\n(100.00,-0.00)\nturtle.heading()\n0.0\n\n"]},
{"title": "4.10. Mapping Types \u2014 : dict", "url": "http://localhost:8000/library/stdtypes.html#dict", "code_snippets": ["a = dict(one=1, two=2, three=3)\nb = {'one': 1, 'two': 2, 'three': 3}\nc = dict(zip(['one', 'two', 'three'], [1, 2, 3]))\nd = dict([('two', 2), ('one', 1), ('three', 3)])\ne = dict({'three': 3, 'one': 1, 'two': 2})\na == b == c == d == e\nTrue\n\n"]},
{"title": "24.1.3.1. Turtle motion: turtle.stamp", "url": "http://localhost:8000/library/turtle.html#turtle.stamp", "code_snippets": ["turtle.color(\"blue\")\nturtle.stamp()\n11\nturtle.fd(50)\n\n"]},
{"title": "24.1.3.1. Turtle motion: turtle.clearstamp", "url": "http://localhost:8000/library/turtle.html#turtle.clearstamp", "code_snippets": ["turtle.position()\n(150.00,-0.00)\nturtle.color(\"blue\")\nastamp = turtle.stamp()\nturtle.fd(50)\nturtle.position()\n(200.00,-0.00)\nturtle.clearstamp(astamp)\nturtle.position()\n(200.00,-0.00)\n\n"]},
{"title": "24.1.3.1. Turtle motion: turtle.clearstamps", "url": "http://localhost:8000/library/turtle.html#turtle.clearstamps", "code_snippets": ["for i in range(8):\n    turtle.stamp(); turtle.fd(30)\n13\n14\n15\n16\n17\n18\n19\n20\nturtle.clearstamps(2)\nturtle.clearstamps(-2)\nturtle.clearstamps()\n\n"]},
{"title": "24.1.3.1. Turtle motion: turtle.undo", "url": "http://localhost:8000/library/turtle.html#turtle.undo", "code_snippets": ["for i in range(4):\n    turtle.fd(50); turtle.lt(80)\n\nfor i in range(8):\n    turtle.undo()\n\n"]},
{"title": "24.1.3.1. Turtle motion: turtle.speed", "url": "http://localhost:8000/library/turtle.html#turtle.speed", "code_snippets": ["turtle.speed()\n3\nturtle.speed('normal')\nturtle.speed()\n6\nturtle.speed(9)\nturtle.speed()\n9\n\n"]},
{"title": "24.1.3.2. Tell Turtle\u2019s state: turtle.position", "url": "http://localhost:8000/library/turtle.html#turtle.position", "code_snippets": ["turtle.pos()\n(440.00,-0.00)\n\n"]},
{"title": "16.4.5.5. Parser defaults: argparse.ArgumentParser.set_defaults", "url": "http://localhost:8000/library/argparse.html#argparse.ArgumentParser.set_defaults", "code_snippets": ["parser = argparse.ArgumentParser()\nparser.add_argument('foo', type=int)\nparser.set_defaults(bar=42, baz='badger')\nparser.parse_args(['736'])\nNamespace(bar=42, baz='badger', foo=736)\n\n", "parser = argparse.ArgumentParser()\nparser.add_argument('--foo', default='bar')\nparser.set_defaults(foo='spam')\nparser.parse_args([])\nNamespace(foo='spam')\n\n"]},
{"title": "16.4.5.5. Parser defaults: argparse.ArgumentParser.get_default", "url": "http://localhost:8000/library/argparse.html#argparse.ArgumentParser.get_default", "code_snippets": ["parser = argparse.ArgumentParser()\nparser.add_argument('--foo', default='badger')\nparser.get_default('foo')\n'badger'\n\n"]},
{"title": "24.1.3.2. Tell Turtle\u2019s state: turtle.towards", "url": "http://localhost:8000/library/turtle.html#turtle.towards", "code_snippets": ["turtle.goto(10, 10)\nturtle.towards(0,0)\n225.0\n\n"]},
{"title": "24.1.3.2. Tell Turtle\u2019s state: turtle.xcor", "url": "http://localhost:8000/library/turtle.html#turtle.xcor", "code_snippets": ["turtle.home()\nturtle.left(50)\nturtle.forward(100)\nturtle.pos()\n(64.28,76.60)\nprint(round(turtle.xcor(), 5))\n64.27876\n\n"]},
{"title": "24.1.3.2. Tell Turtle\u2019s state: turtle.ycor", "url": "http://localhost:8000/library/turtle.html#turtle.ycor", "code_snippets": ["turtle.home()\nturtle.left(60)\nturtle.forward(100)\nprint(turtle.pos())\n(50.00,86.60)\nprint(round(turtle.ycor(), 5))\n86.60254\n\n"]},
{"title": "16.4.5.8. Customizing file parsing: argparse.ArgumentParser.convert_arg_line_to_args", "url": "http://localhost:8000/library/argparse.html#argparse.ArgumentParser.convert_arg_line_to_args", "code_snippets": ["class MyArgumentParser(argparse.ArgumentParser):\n    def convert_arg_line_to_args(self, arg_line):\n        return arg_line.split()\n\n"]},
{"title": "16.6.1. Logger Objects: logging.Logger.debug", "url": "http://localhost:8000/library/logging.html#logging.Logger.debug", "code_snippets": ["FORMAT = '%(asctime)-15s %(clientip)s %(user)-8s %(message)s'\nlogging.basicConfig(format=FORMAT)\nd = {'clientip': '192.168.0.1', 'user': 'fbloggs'}\nlogger = logging.getLogger('tcpserver')\nlogger.warning('Protocol problem: %s', 'connection reset', extra=d)\n\n"]},
{"title": "24.1.3.2. Tell Turtle\u2019s state: turtle.heading", "url": "http://localhost:8000/library/turtle.html#turtle.heading", "code_snippets": ["turtle.home()\nturtle.left(67)\nturtle.heading()\n67.0\n\n"]},
{"title": "24.1.3.2. Tell Turtle\u2019s state: turtle.distance", "url": "http://localhost:8000/library/turtle.html#turtle.distance", "code_snippets": ["turtle.home()\nturtle.distance(30,40)\n50.0\nturtle.distance((30,40))\n50.0\njoe = Turtle()\njoe.forward(77)\nturtle.distance(joe)\n77.0\n\n"]},
{"title": "16.2.3.1. I/O Base Classes: io.IOBase", "url": "http://localhost:8000/library/io.html#io.IOBase", "code_snippets": ["with open('spam.txt', 'w') as file:\n    file.write('Spam and eggs!')\n\n"]},
{"title": "24.1.3.3. Settings for measurement: turtle.radians", "url": "http://localhost:8000/library/turtle.html#turtle.radians", "code_snippets": ["turtle.home()\nturtle.left(90)\nturtle.heading()\n90.0\nturtle.radians()\nturtle.heading()\n1.5707963267948966\n\n"]},
{"title": "None: turtle.pensize", "url": "http://localhost:8000/library/turtle.html#turtle.pensize", "code_snippets": ["turtle.pensize()\n1\nturtle.pensize(10)   # from here on lines of width 10 are drawn\n\n"]},
{"title": "16.3. : time.strftime", "url": "http://localhost:8000/library/time.html#time.strftime", "code_snippets": ["from time import gmtime, strftime\nstrftime(\"%a, %d %b %Y %H:%M:%S +0000\", gmtime())\n'Thu, 28 Jun 2001 14:17:15 +0000'\n\n"]},
{"title": "16.3. : time.strptime", "url": "http://localhost:8000/library/time.html#time.strptime", "code_snippets": ["import time\ntime.strptime(\"30 Nov 00\", \"%d %b %y\")   \ntime.struct_time(tm_year=2000, tm_mon=11, tm_mday=30, tm_hour=0, tm_min=0,\n                 tm_sec=0, tm_wday=3, tm_yday=335, tm_isdst=-1)\n\n"]},
{"title": "None: turtle.pen", "url": "http://localhost:8000/library/turtle.html#turtle.pen", "code_snippets": ["turtle.pen(fillcolor=\"black\", pencolor=\"red\", pensize=10)\nsorted(turtle.pen().items())\n[('fillcolor', 'black'), ('outline', 1), ('pencolor', 'red'),\n ('pendown', True), ('pensize', 10), ('resizemode', 'noresize'),\n ('shearfactor', 0.0), ('shown', True), ('speed', 9),\n ('stretchfactor', (1.0, 1.0)), ('tilt', 0.0)]\npenstate=turtle.pen()\nturtle.color(\"yellow\", \"\")\nturtle.penup()\nsorted(turtle.pen().items())[:3]\n[('fillcolor', ''), ('outline', 1), ('pencolor', 'yellow')]\nturtle.pen(penstate, fillcolor=\"green\")\nsorted(turtle.pen().items())[:3]\n[('fillcolor', 'green'), ('outline', 1), ('pencolor', 'red')]\n\n"]},
{"title": "None: turtle.isdown", "url": "http://localhost:8000/library/turtle.html#turtle.isdown", "code_snippets": ["turtle.penup()\nturtle.isdown()\nFalse\nturtle.pendown()\nturtle.isdown()\nTrue\n\n"]},
{"title": "16.2.3.4. Text I/O: io.StringIO", "url": "http://localhost:8000/library/io.html#io.StringIO", "code_snippets": ["import io\n\noutput = io.StringIO()\noutput.write('First line.\\n')\nprint('Second line.', file=output)\n\n# Retrieve file contents -- this will be\n# 'First line.\\nSecond line.\\n'\ncontents = output.getvalue()\n\n# Close object and discard memory buffer --\n# .getvalue() will now raise an exception.\noutput.close()\n\n"]},
{"title": "17.5.1.2. Popen Constructor: subprocess.Popen", "url": "http://localhost:8000/library/subprocess.html#subprocess.Popen", "code_snippets": ["Popen(['/bin/sh', '-c', args[0], args[1], ])\n\n", "with Popen([\"ifconfig\"], stdout=PIPE) as proc:\n    log.write(proc.stdout.read())\n\n"]},
{"title": "16.3. : time.tzset", "url": "http://localhost:8000/library/time.html#time.tzset", "code_snippets": ["os.environ['TZ'] = 'EST+05EDT,M4.1.0,M10.5.0'\ntime.tzset()\ntime.strftime('%X %x %Z')\n'02:07:36 05/08/03 EDT'\nos.environ['TZ'] = 'AEST-10AEDT-11,M10.5.0,M3.5.0'\ntime.tzset()\ntime.strftime('%X %x %Z')\n'16:08:12 05/08/03 AEST'\n\n", "os.environ['TZ'] = 'US/Eastern'\ntime.tzset()\ntime.tzname\n('EST', 'EDT')\nos.environ['TZ'] = 'Egypt'\ntime.tzset()\ntime.tzname\n('EET', 'EEST')\n\n"]},
{"title": "None: turtle.pencolor", "url": "http://localhost:8000/library/turtle.html#turtle.pencolor", "code_snippets": ["colormode()\n1.0\nturtle.pencolor()\n'red'\nturtle.pencolor(\"brown\")\nturtle.pencolor()\n'brown'\ntup = (0.2, 0.8, 0.55)\nturtle.pencolor(tup)\nturtle.pencolor()\n(0.2, 0.8, 0.5490196078431373)\ncolormode(255)\nturtle.pencolor()\n(51.0, 204.0, 140.0)\nturtle.pencolor('#32c18f')\nturtle.pencolor()\n(50.0, 193.0, 143.0)\n\n"]},
{"title": "None: turtle.fillcolor", "url": "http://localhost:8000/library/turtle.html#turtle.fillcolor", "code_snippets": ["turtle.fillcolor(\"violet\")\nturtle.fillcolor()\n'violet'\ncol = turtle.pencolor()\ncol\n(50.0, 193.0, 143.0)\nturtle.fillcolor(col)\nturtle.fillcolor()\n(50.0, 193.0, 143.0)\nturtle.fillcolor('#ffffff')\nturtle.fillcolor()\n(255.0, 255.0, 255.0)\n\n"]},
{"title": "None: turtle.color", "url": "http://localhost:8000/library/turtle.html#turtle.color", "code_snippets": ["turtle.color(\"red\", \"green\")\nturtle.color()\n('red', 'green')\ncolor(\"#285078\", \"#a0c8f0\")\ncolor()\n((40.0, 80.0, 120.0), (160.0, 200.0, 240.0))\n\n"]},
{"title": "None: turtle.filling", "url": "http://localhost:8000/library/turtle.html#turtle.filling", "code_snippets": ["turtle.begin_fill()\nif turtle.filling():\n   turtle.pensize(5)\nelse:\n   turtle.pensize(3)\n\n"]},
{"title": "None: turtle.end_fill", "url": "http://localhost:8000/library/turtle.html#turtle.end_fill", "code_snippets": ["turtle.color(\"black\", \"red\")\nturtle.begin_fill()\nturtle.circle(80)\nturtle.end_fill()\n\n"]},
{"title": "None: turtle.reset", "url": "http://localhost:8000/library/turtle.html#turtle.reset", "code_snippets": ["turtle.goto(0,-22)\nturtle.left(100)\nturtle.position()\n(0.00,-22.00)\nturtle.heading()\n100.0\nturtle.reset()\nturtle.position()\n(0.00,0.00)\nturtle.heading()\n0.0\n\n"]},
{"title": "16.6.6. LogRecord Objects: logging.LogRecord", "url": "http://localhost:8000/library/logging.html#logging.LogRecord", "code_snippets": ["old_factory = logging.getLogRecordFactory()\n\ndef record_factory(*args, **kwargs):\n    record = old_factory(*args, **kwargs)\n    record.custom_attribute = 0xdecafbad\n    return record\n\nlogging.setLogRecordFactory(record_factory)\n\n"]},
{"title": "23.2. : locale.setlocale", "url": "http://localhost:8000/library/locale.html#locale.setlocale", "code_snippets": ["import locale\nlocale.setlocale(locale.LC_ALL, '')\n\n"]},
{"title": "17.5.3. Popen Objects: subprocess.Popen.communicate", "url": "http://localhost:8000/library/subprocess.html#subprocess.Popen.communicate", "code_snippets": ["proc = subprocess.Popen()\ntry:\n    outs, errs = proc.communicate(timeout=15)\nexcept TimeoutExpired:\n    proc.kill()\n    outs, errs = proc.communicate()\n\n"]},
{"title": "None: turtle.write", "url": "http://localhost:8000/library/turtle.html#turtle.write", "code_snippets": ["turtle.write(\"Home = \", True, align=\"center\")\nturtle.write((0,0), True)\n\n"]},
{"title": "None: turtle.hideturtle", "url": "http://localhost:8000/library/turtle.html#turtle.hideturtle", "code_snippets": ["turtle.hideturtle()\n\n"]},
{"title": "None: turtle.showturtle", "url": "http://localhost:8000/library/turtle.html#turtle.showturtle", "code_snippets": ["turtle.showturtle()\n\n"]},
{"title": "16.6.10. Module-Level Functions: logging.debug", "url": "http://localhost:8000/library/logging.html#logging.debug", "code_snippets": ["FORMAT = '%(asctime)-15s %(clientip)s %(user)-8s %(message)s'\nlogging.basicConfig(format=FORMAT)\nd = {'clientip': '192.168.0.1', 'user': 'fbloggs'}\nlogging.warning('Protocol problem: %s', 'connection reset', extra=d)\n\n"]},
{"title": "None: turtle.isvisible", "url": "http://localhost:8000/library/turtle.html#turtle.isvisible", "code_snippets": ["turtle.hideturtle()\nturtle.isvisible()\nFalse\nturtle.showturtle()\nturtle.isvisible()\nTrue\n\n"]},
{"title": "None: turtle.shape", "url": "http://localhost:8000/library/turtle.html#turtle.shape", "code_snippets": ["turtle.shape()\n'classic'\nturtle.shape(\"turtle\")\nturtle.shape()\n'turtle'\n\n"]},
{"title": "None: turtle.resizemode", "url": "http://localhost:8000/library/turtle.html#turtle.resizemode", "code_snippets": ["turtle.resizemode()\n'noresize'\nturtle.resizemode(\"auto\")\nturtle.resizemode()\n'auto'\n\n"]},
{"title": "25.3.1. Using Tix: tkinter.tix.Tk", "url": "http://localhost:8000/library/tkinter.tix.html#tkinter.tix.Tk", "code_snippets": ["from tkinter import tix\nfrom tkinter.constants import *\nroot = tix.Tk()\n\n"]},
{"title": "None: turtle.shapesize", "url": "http://localhost:8000/library/turtle.html#turtle.shapesize", "code_snippets": ["turtle.shapesize()\n(1.0, 1.0, 1)\nturtle.resizemode(\"user\")\nturtle.shapesize(5, 5, 12)\nturtle.shapesize()\n(5, 5, 12)\nturtle.shapesize(outline=8)\nturtle.shapesize()\n(5, 5, 8)\n\n"]},
{"title": "None: turtle.shearfactor", "url": "http://localhost:8000/library/turtle.html#turtle.shearfactor", "code_snippets": ["turtle.shape(\"circle\")\nturtle.shapesize(5,2)\nturtle.shearfactor(0.5)\nturtle.shearfactor()\n0.5\n\n"]},
{"title": "17.5.5. Older high-level API: subprocess.call", "url": "http://localhost:8000/library/subprocess.html#subprocess.call", "code_snippets": ["run().returncode\n\n"]},
{"title": "17.5.5. Older high-level API: subprocess.check_output", "url": "http://localhost:8000/library/subprocess.html#subprocess.check_output", "code_snippets": ["subprocess.check_output(\n    \"ls non_existent_file; exit 0\",\n    stderr=subprocess.STDOUT,\n    shell=True)\n'ls: non_existent_file: No such file or directory\\n'\n\n"]},
{"title": "23.1.2.2. The : gettext.GNUTranslations.ngettext", "url": "http://localhost:8000/library/gettext.html#gettext.GNUTranslations.ngettext", "code_snippets": ["n = len(os.listdir('.'))\ncat = GNUTranslations(somefile)\nmessage = cat.ngettext(\n    'There is %(num)d file in this directory',\n    'There are %(num)d files in this directory',\n    n) % {'num': n}\n\n"]},
{"title": "None: turtle.tilt", "url": "http://localhost:8000/library/turtle.html#turtle.tilt", "code_snippets": ["turtle.reset()\nturtle.shape(\"circle\")\nturtle.shapesize(5,2)\nturtle.tilt(30)\nturtle.fd(50)\nturtle.tilt(30)\nturtle.fd(50)\n\n"]},
{"title": "None: turtle.settiltangle", "url": "http://localhost:8000/library/turtle.html#turtle.settiltangle", "code_snippets": ["turtle.reset()\nturtle.shape(\"circle\")\nturtle.shapesize(5,2)\nturtle.settiltangle(45)\nturtle.fd(50)\nturtle.settiltangle(-45)\nturtle.fd(50)\n\n"]},
{"title": "17.5.7. Legacy Shell Invocation Functions: subprocess.getstatusoutput", "url": "http://localhost:8000/library/subprocess.html#subprocess.getstatusoutput", "code_snippets": ["subprocess.getstatusoutput('ls /bin/ls')\n(0, '/bin/ls')\nsubprocess.getstatusoutput('cat /bin/junk')\n(256, 'cat: /bin/junk: No such file or directory')\nsubprocess.getstatusoutput('/bin/junk')\n(256, 'sh: /bin/junk: not found')\n\n"]},
{"title": "23.1.2. Class-based API: gettext.install", "url": "http://localhost:8000/library/gettext.html#gettext.install", "code_snippets": ["print(_('This string will be translated.'))\n\n"]},
{"title": "None: turtle.tiltangle", "url": "http://localhost:8000/library/turtle.html#turtle.tiltangle", "code_snippets": ["turtle.reset()\nturtle.shape(\"circle\")\nturtle.shapesize(5,2)\nturtle.tilt(45)\nturtle.tiltangle()\n45.0\n\n"]},
{"title": "None: turtle.shapetransform", "url": "http://localhost:8000/library/turtle.html#turtle.shapetransform", "code_snippets": ["turtle = Turtle()\nturtle.shape(\"square\")\nturtle.shapesize(4,2)\nturtle.shearfactor(-0.5)\nturtle.shapetransform()\n(4.0, -1.0, -0.0, 2.0)\n\n"]},
{"title": "None: turtle.get_shapepoly", "url": "http://localhost:8000/library/turtle.html#turtle.get_shapepoly", "code_snippets": ["turtle.shape(\"square\")\nturtle.shapetransform(4, -1, 0, 2)\nturtle.get_shapepoly()\n((50, -20), (30, 20), (-50, 20), (-30, -20))\n\n"]},
{"title": "17.5.7. Legacy Shell Invocation Functions: subprocess.getoutput", "url": "http://localhost:8000/library/subprocess.html#subprocess.getoutput", "code_snippets": ["subprocess.getoutput('ls /bin/ls')\n'/bin/ls'\n\n"]},
{"title": "24.1.3.6. Using events: turtle.onclick", "url": "http://localhost:8000/library/turtle.html#turtle.onclick", "code_snippets": ["def turn(x, y):\n    left(180)\n\nonclick(turn)  # Now clicking into the turtle will turn it.\nonclick(None)  # event-binding will be removed\n\n"]},
{"title": "24.1.3.6. Using events: turtle.onrelease", "url": "http://localhost:8000/library/turtle.html#turtle.onrelease", "code_snippets": ["class MyTurtle(Turtle):\n    def glow(self,x,y):\n        self.fillcolor(\"red\")\n    def unglow(self,x,y):\n        self.fillcolor(\"\")\n\nturtle = MyTurtle()\nturtle.onclick(turtle.glow)     # clicking on turtle turns fillcolor red,\nturtle.onrelease(turtle.unglow) # releasing turns it to transparent.\n\n"]},
{"title": "17.2.2.3. Miscellaneous: multiprocessing.freeze_support", "url": "http://localhost:8000/library/multiprocessing.html#multiprocessing.freeze_support", "code_snippets": ["from multiprocessing import Process, freeze_support\n\ndef f():\n    print('hello world!')\n\nif __name__ == '__main__':\n    freeze_support()\n    Process(target=f).start()\n\n"]},
{"title": "24.1.3.6. Using events: turtle.ondrag", "url": "http://localhost:8000/library/turtle.html#turtle.ondrag", "code_snippets": ["turtle.ondrag(turtle.goto)\n\n"]},
{"title": "24.1.3.7. Special Turtle methods: turtle.get_poly", "url": "http://localhost:8000/library/turtle.html#turtle.get_poly", "code_snippets": ["turtle.home()\nturtle.begin_poly()\nturtle.fd(100)\nturtle.left(20)\nturtle.fd(30)\nturtle.left(60)\nturtle.fd(50)\nturtle.end_poly()\np = turtle.get_poly()\nregister_shape(\"myFavouriteShape\", p)\n\n"]},
{"title": "17.2.2.3. Miscellaneous: multiprocessing.set_executable", "url": "http://localhost:8000/library/multiprocessing.html#multiprocessing.set_executable", "code_snippets": ["set_executable(os.path.join(sys.exec_prefix, 'pythonw.exe'))\n\n"]},
{"title": "26.7.2. Fixers: 2to3fixer-idioms", "url": "http://localhost:8000/library/2to3.html#2to3fixer-idioms", "code_snippets": ["L = list(some_iterable)\nL.sort()\n\n", "L = sorted(some_iterable)\n\n"]},
{"title": "25.1.6.1. Setting Options: None", "url": "http://localhost:8000/library/tkinter.html#setting-options", "code_snippets": ["fred = Button(self, fg=\"red\", bg=\"blue\")\n\n", "fred[\"fg\"] = \"red\"\nfred[\"bg\"] = \"blue\"\n\n", "fred.config(fg=\"red\", bg=\"blue\")\n\n"]},
{"title": "25.3.3. Tix Commands: tkinter.tix.tixCommand", "url": "http://localhost:8000/library/tkinter.tix.html#tkinter.tix.tixCommand", "code_snippets": ["from tkinter import tix\nroot = tix.Tk()\nprint(root.tix_configure())\n\n"]},
{"title": "16.1.4. File Descriptor Operations: os.closerange", "url": "http://localhost:8000/library/os.html#os.closerange", "code_snippets": ["for fd in range(fd_low, fd_high):\n    try:\n        os.close(fd)\n    except OSError:\n        pass\n\n"]},
{"title": "24.1.3.7. Special Turtle methods: turtle.clone", "url": "http://localhost:8000/library/turtle.html#turtle.clone", "code_snippets": ["mick = Turtle()\njoe = mick.clone()\n\n"]},
{"title": "24.1.3.7. Special Turtle methods: turtle.setundobuffer", "url": "http://localhost:8000/library/turtle.html#turtle.setundobuffer", "code_snippets": ["turtle.setundobuffer(42)\n\n"]},
{"title": "25.1.6.6. Tk Option Data Types: None", "url": "http://localhost:8000/library/tkinter.html#tk-option-data-types", "code_snippets": ["def print_it():\n    print(\"hi there\")\nfred[\"command\"] = print_it\n\n"]},
{"title": "25.1.7. File Handlers: tkinter.Widget.tk.createfilehandler", "url": "http://localhost:8000/library/tkinter.html#tkinter.Widget.tk.createfilehandler", "code_snippets": ["callback(file, mask)\n\n"]},
{"title": "24.1.3.7. Special Turtle methods: turtle.undobufferentries", "url": "http://localhost:8000/library/turtle.html#turtle.undobufferentries", "code_snippets": ["while undobufferentries():\n    undo()\n\n"]},
{"title": "24.1.4.1. Window control: turtle.bgcolor", "url": "http://localhost:8000/library/turtle.html#turtle.bgcolor", "code_snippets": ["screen.bgcolor(\"orange\")\nscreen.bgcolor()\n'orange'\nscreen.bgcolor(\"#800080\")\nscreen.bgcolor()\n(128.0, 0.0, 128.0)\n\n"]},
{"title": "24.1.4.1. Window control: turtle.bgpic", "url": "http://localhost:8000/library/turtle.html#turtle.bgpic", "code_snippets": ["screen.bgpic()\n'nopic'\nscreen.bgpic(\"landscape.gif\")\nscreen.bgpic()\n\"landscape.gif\"\n\n"]},
{"title": "24.1.4.1. Window control: turtle.screensize", "url": "http://localhost:8000/library/turtle.html#turtle.screensize", "code_snippets": ["screen.screensize()\n(400, 300)\nscreen.screensize(2000,1500)\nscreen.screensize()\n(2000, 1500)\n\n"]},
{"title": "17.2.2.6. Shared : multiprocessing.Value", "url": "http://localhost:8000/library/multiprocessing.html#multiprocessing.Value", "code_snippets": ["counter.value += 1\n\n", "with counter.get_lock():\n    counter.value += 1\n\n"]},
{"title": "26.1.7. Classes, functions, and decorators: typing.TypeVar", "url": "http://localhost:8000/library/typing.html#typing.TypeVar", "code_snippets": ["T = TypeVar('T')  # Can be anything\nA = TypeVar('A', str, bytes)  # Must be str or bytes\n\n", "def repeat(x: T, n: int) -> Sequence[T]:\n    \"\"\"Return a list containing n references to x.\"\"\"\n    return [x]*n\n\ndef longest(x: A, y: A) -> A:\n    \"\"\"Return the longest of two strings.\"\"\"\n    return x if len(x) >= len(y) else y\n\n"]},
{"title": "24.1.4.1. Window control: turtle.setworldcoordinates", "url": "http://localhost:8000/library/turtle.html#turtle.setworldcoordinates", "code_snippets": ["screen.reset()\nscreen.setworldcoordinates(-50,-7.5,50,7.5)\nfor _ in range(72):\n    left(10)\n\nfor _ in range(8):\n    left(45); fd(2)   # a regular octagon\n\n"]},
{"title": "24.1.4.2. Animation control: turtle.delay", "url": "http://localhost:8000/library/turtle.html#turtle.delay", "code_snippets": ["screen.delay()\n10\nscreen.delay(5)\nscreen.delay()\n5\n\n"]},
{"title": "17.2.2.7. Managers: multiprocessing.managers.Namespace", "url": "http://localhost:8000/library/multiprocessing.html#multiprocessing.managers.Namespace", "code_snippets": ["manager = multiprocessing.Manager()\nGlobal = manager.Namespace()\nGlobal.x = 10\nGlobal.y = 'hello'\nGlobal._z = 12.3    # this is an attribute of the proxy\nprint(Global)\nNamespace(x=10, y='hello')\n\n"]},
{"title": "26.5.2. The Mock Class: unittest.mock.PropertyMock", "url": "http://localhost:8000/library/unittest.mock.html#unittest.mock.PropertyMock", "code_snippets": ["class Foo:\n    @property\n    def foo(self):\n        return 'something'\n    @foo.setter\n    def foo(self, value):\n        pass\n\nwith patch('__main__.Foo.foo', new_callable=PropertyMock) as mock_foo:\n    mock_foo.return_value = 'mockity-mock'\n    this_foo = Foo()\n    print(this_foo.foo)\n    this_foo.foo = 6\n\nmockity-mock\nmock_foo.mock_calls\n[call(), call(6)]\n\n"]},
{"title": "26.1.7. Classes, functions, and decorators: typing.Generic", "url": "http://localhost:8000/library/typing.html#typing.Generic", "code_snippets": ["X = TypeVar('X')\nY = TypeVar('Y')\n\ndef lookup_name(mapping: Mapping[X, Y], key: X, default: Y) -> Y:\n    try:\n        return mapping[key]\n    except KeyError:\n        return default\n\n"]},
{"title": "26.1.7. Classes, functions, and decorators: typing.Type", "url": "http://localhost:8000/library/typing.html#typing.Type", "code_snippets": ["a = 3         # Has type 'int'\nb = int       # Has type 'Type[int]'\nc = type(a)   # Also has type 'Type[int]'\n\n"]},
{"title": "26.3.3.5. Option Flags: doctest.register_optionflag", "url": "http://localhost:8000/library/doctest.html#doctest.register_optionflag", "code_snippets": ["MY_FLAG = register_optionflag('MY_FLAG')\n\n"]},
{"title": "24.1.4.2. Animation control: turtle.tracer", "url": "http://localhost:8000/library/turtle.html#turtle.tracer", "code_snippets": ["screen.tracer(8, 25)\ndist = 2\nfor i in range(200):\n    fd(dist)\n    rt(90)\n    dist += 2\n\n"]},
{"title": "24.1.4.3. Using screen events: turtle.onkey", "url": "http://localhost:8000/library/turtle.html#turtle.onkey", "code_snippets": ["def f():\n    fd(50)\n    lt(60)\n\nscreen.onkey(f, \"Up\")\nscreen.listen()\n\n"]},
{"title": "24.1.4.3. Using screen events: turtle.onkeypress", "url": "http://localhost:8000/library/turtle.html#turtle.onkeypress", "code_snippets": ["def f():\n    fd(50)\n\nscreen.onkey(f, \"Up\")\nscreen.listen()\n\n"]},
{"title": "24.1.4.3. Using screen events: turtle.onscreenclick", "url": "http://localhost:8000/library/turtle.html#turtle.onscreenclick", "code_snippets": ["screen.onclick(turtle.goto) # Subsequently clicking into the TurtleScreen will\n                            # make the turtle move to the clicked point.\nscreen.onclick(None)        # remove event binding again\n\n"]},
{"title": "24.1.4.3. Using screen events: turtle.ontimer", "url": "http://localhost:8000/library/turtle.html#turtle.ontimer", "code_snippets": ["running = True\ndef f():\n    if running:\n        fd(50)\n        lt(60)\n        screen.ontimer(f, 250)\nf()   ### makes the turtle march around\nrunning = False\n\n"]},
{"title": "24.1.4.3. Using screen events: turtle.mainloop", "url": "http://localhost:8000/library/turtle.html#turtle.mainloop", "code_snippets": ["screen.mainloop()\n\n"]},
{"title": "24.1.4.4. Input methods: turtle.textinput", "url": "http://localhost:8000/library/turtle.html#turtle.textinput", "code_snippets": ["screen.textinput(\"NIM\", \"Name of first player:\")\n\n"]},
{"title": "24.1.4.4. Input methods: turtle.numinput", "url": "http://localhost:8000/library/turtle.html#turtle.numinput", "code_snippets": ["screen.numinput(\"Poker\", \"Your stakes:\", 1000, minval=10, maxval=10000)\n\n"]},
{"title": "24.1.4.5. Settings and special methods: turtle.mode", "url": "http://localhost:8000/library/turtle.html#turtle.mode", "code_snippets": ["mode(\"logo\")   # resets turtle heading to north\nmode()\n'logo'\n\n"]},
{"title": "26.4.8.3. Loading and running tests: unittest.main", "url": "http://localhost:8000/library/unittest.html#unittest.main", "code_snippets": ["if __name__ == '__main__':\n    unittest.main()\n\n", "if __name__ == '__main__':\n    unittest.main(verbosity=2)\n\n", "from unittest import main\nmain(module='test_module', exit=False)\n\n"]},
{"title": "26.5.5.3. call: unittest.mock.call", "url": "http://localhost:8000/library/unittest.mock.html#unittest.mock.call", "code_snippets": ["m = MagicMock(return_value=None)\nm(1, 2, a='foo', b='bar')\nm()\nm.call_args_list == [call(1, 2, a='foo', b='bar'), call()]\nTrue\n\n"]},
{"title": "27.4.3. : profile.run", "url": "http://localhost:8000/library/profile.html#profile.run", "code_snippets": ["exec(command, __main__.__dict__, __main__.__dict__)\n\n"]},
{"title": "27.4.3. : profile.runctx", "url": "http://localhost:8000/library/profile.html#profile.runctx", "code_snippets": ["exec(command, globals, locals)\n\n"]},
{"title": "27.4.3. : profile.Profile", "url": "http://localhost:8000/library/profile.html#profile.Profile", "code_snippets": ["import cProfile, pstats, io\npr = cProfile.Profile()\npr.enable()\n# ... do something ...\npr.disable()\ns = io.StringIO()\nsortby = 'cumulative'\nps = pstats.Stats(pr, stream=s).sort_stats(sortby)\nps.print_stats()\nprint(s.getvalue())\n\n"]},
{"title": "26.3.7. Debugging: doctest.script_from_examples", "url": "http://localhost:8000/library/doctest.html#doctest.script_from_examples", "code_snippets": ["import doctest\nprint(doctest.script_from_examples(r\"\"\"\n    Set x and y to 1 and 2.\n    >>> x, y = 1, 2\n\n    Print their sum:\n    >>> print(x+y)\n    3\n\"\"\"))\n\n", "# Set x and y to 1 and 2.\nx, y = 1, 2\n#\n# Print their sum:\nprint(x+y)\n# Expected:\n## 3\n\n"]},
{"title": "26.3.7. Debugging: doctest.testsource", "url": "http://localhost:8000/library/doctest.html#doctest.testsource", "code_snippets": ["import a, doctest\nprint(doctest.testsource(a, \"a.f\"))\n\n"]},
{"title": "24.1.4.5. Settings and special methods: turtle.getshapes", "url": "http://localhost:8000/library/turtle.html#turtle.getshapes", "code_snippets": ["screen.getshapes()\n['arrow', 'blank', 'circle', ..., 'turtle']\n\n"]},
{"title": "27.4.8. Using a custom timer: None", "url": "http://localhost:8000/library/profile.html#using-a-custom-timer", "code_snippets": ["pr = cProfile.Profile(your_integer_time_func, 0.001)\n\n"]},
{"title": "26.1.7. Classes, functions, and decorators: typing.List", "url": "http://localhost:8000/library/typing.html#typing.List", "code_snippets": ["T = TypeVar('T', int, float)\n\ndef vec2(x: T, y: T) -> List[T]:\n    return [x, y]\n\ndef keep_positives(vector: Sequence[T]) -> List[T]:\n    return [item for item in vector if item > 0]\n\n"]},
{"title": "24.1.4.5. Settings and special methods: turtle.turtles", "url": "http://localhost:8000/library/turtle.html#turtle.turtles", "code_snippets": ["for turtle in screen.turtles():\n    turtle.color(\"red\")\n\n"]},
{"title": "24.1.4.5. Settings and special methods: turtle.window_height", "url": "http://localhost:8000/library/turtle.html#turtle.window_height", "code_snippets": ["screen.window_height()\n480\n\n"]},
{"title": "24.1.4.5. Settings and special methods: turtle.window_width", "url": "http://localhost:8000/library/turtle.html#turtle.window_width", "code_snippets": ["screen.window_width()\n640\n\n"]},
{"title": "24.1.4.6. Methods specific to Screen, not inherited from TurtleScreen: turtle.setup", "url": "http://localhost:8000/library/turtle.html#turtle.setup", "code_snippets": ["screen.setup (width=200, height=200, startx=0, starty=0)\n             # sets window to 200x200 pixels, in upper left of screen\nscreen.setup(width=.75, height=0.5, startx=None, starty=None)\n             # sets window to 75% of screen by 50% of screen and centers\n\n"]},
{"title": "24.1.4.6. Methods specific to Screen, not inherited from TurtleScreen: turtle.title", "url": "http://localhost:8000/library/turtle.html#turtle.title", "code_snippets": ["screen.title(\"Welcome to the turtle zoo!\")\n\n"]},
{"title": "26.1.7. Classes, functions, and decorators: typing.Coroutine", "url": "http://localhost:8000/library/typing.html#typing.Coroutine", "code_snippets": ["from typing import List, Coroutine\nc = None # type: Coroutine[List[str], str, int]\n\nx = c.send('hi') # type: List[str]\nasync def bar() -> None:\n    x = await c # type: int\n\n"]},
{"title": "26.1.7. Classes, functions, and decorators: typing.Dict", "url": "http://localhost:8000/library/typing.html#typing.Dict", "code_snippets": ["def get_position_in_index(word_list: Dict[str, int], word: str) -> int:\n    return word_list[word]\n\n"]},
{"title": "27.3. : pdb.Pdb", "url": "http://localhost:8000/library/pdb.html#pdb.Pdb", "code_snippets": ["import pdb; pdb.Pdb(skip=['django.*']).set_trace()\n\n"]},
{"title": "26.1.7. Classes, functions, and decorators: typing.Generator", "url": "http://localhost:8000/library/typing.html#typing.Generator", "code_snippets": ["def echo_round() -> Generator[int, float, str]:\n    sent = yield 0\n    while sent >= 0:\n        sent = yield round(sent)\n    return 'Done'\n\n", "def infinite_stream(start: int) -> Generator[int, None, None]:\n    while True:\n        yield start\n        start += 1\n\n", "def infinite_stream(start: int) -> Iterator[int]:\n    while True:\n        yield start\n        start += 1\n\n"]},
{"title": "26.1.7. Classes, functions, and decorators: typing.AsyncGenerator", "url": "http://localhost:8000/library/typing.html#typing.AsyncGenerator", "code_snippets": ["async def echo_round() -> AsyncGenerator[int, float]:\n    sent = yield 0\n    while sent >= 0.0:\n        rounded = await round(sent)\n        sent = yield rounded\n\n", "async def infinite_stream(start: int) -> AsyncGenerator[int, None]:\n    while True:\n        yield start\n        start = await increment(start)\n\n", "async def infinite_stream(start: int) -> AsyncIterator[int]:\n    while True:\n        yield start\n        start = await increment(start)\n\n"]},
{"title": "16.1.5. Files and Directories: os.scandir", "url": "http://localhost:8000/library/os.html#os.scandir", "code_snippets": ["with os.scandir(path) as it:\n    for entry in it:\n        if not entry.name.startswith('.') and entry.is_file():\n            print(entry.name)\n\n"]},
{"title": "26.1.7. Classes, functions, and decorators: typing.Text", "url": "http://localhost:8000/library/typing.html#typing.Text", "code_snippets": ["def add_unicode_checkmark(text: Text) -> Text:\n    return text + u' \\u2713'\n\n"]},
{"title": "26.1.7. Classes, functions, and decorators: typing.NamedTuple", "url": "http://localhost:8000/library/typing.html#typing.NamedTuple", "code_snippets": ["Employee = collections.namedtuple('Employee', ['name', 'id'])\n\n", "Employee = NamedTuple('Employee', [('name', str), ('id', int)])\n\n"]},
{"title": "16.1.5. Files and Directories: os.stat", "url": "http://localhost:8000/library/os.html#os.stat", "code_snippets": ["import os\nstatinfo = os.stat('somefile.txt')\nstatinfo\nos.stat_result(st_mode=33188, st_ino=7876932, st_dev=234881026,\nst_nlink=1, st_uid=501, st_gid=501, st_size=264, st_atime=1297230295,\nst_mtime=1297230027, st_ctime=1297230027)\nstatinfo.st_size\n264\n\n"]},
{"title": "26.1.7. Classes, functions, and decorators: typing.NewType", "url": "http://localhost:8000/library/typing.html#typing.NewType", "code_snippets": ["UserId = NewType('UserId', int)\nfirst_user = UserId(1)\n\n"]},
{"title": "21.20. : uuid.UUID", "url": "http://localhost:8000/library/uuid.html#uuid.UUID", "code_snippets": ["UUID('{12345678-1234-5678-1234-567812345678}')\nUUID('12345678123456781234567812345678')\nUUID('urn:uuid:12345678-1234-5678-1234-567812345678')\nUUID(bytes=b'\\x12\\x34\\x56\\x78'*4)\nUUID(bytes_le=b'\\x78\\x56\\x34\\x12\\x34\\x12\\x78\\x56' +\n              b'\\x12\\x34\\x56\\x78\\x12\\x34\\x56\\x78')\nUUID(fields=(0x12345678, 0x1234, 0x5678, 0x12, 0x34, 0x567812345678))\nUUID(int=0x12345678123456781234567812345678)\n\n"]},
{"title": "21.23.1. Cookie Objects: http.cookies.BaseCookie.load", "url": "http://localhost:8000/library/http.cookies.html#http.cookies.BaseCookie.load", "code_snippets": ["for k, v in rawdata.items():\n    cookie[k] = v\n\n"]},
{"title": "16.1.5. Files and Directories: os.supports_dir_fd", "url": "http://localhost:8000/library/os.html#os.supports_dir_fd", "code_snippets": ["os.stat in os.supports_dir_fd\n\n"]},
{"title": "16.1.5. Files and Directories: os.supports_effective_ids", "url": "http://localhost:8000/library/os.html#os.supports_effective_ids", "code_snippets": ["os.access in os.supports_effective_ids\n\n"]},
{"title": "16.1.5. Files and Directories: os.supports_fd", "url": "http://localhost:8000/library/os.html#os.supports_fd", "code_snippets": ["os.chdir in os.supports_fd\n\n"]},
{"title": "16.1.5. Files and Directories: os.supports_follow_symlinks", "url": "http://localhost:8000/library/os.html#os.supports_follow_symlinks", "code_snippets": ["os.stat in os.supports_follow_symlinks\n\n"]},
{"title": "21.21.1. Server Creation Notes: socketserver.ForkingMixIn", "url": "http://localhost:8000/library/socketserver.html#socketserver.ForkingMixIn", "code_snippets": ["class ThreadingUDPServer(ThreadingMixIn, UDPServer):\n    pass\n\n"]},
{"title": "16.1.5. Files and Directories: os.walk", "url": "http://localhost:8000/library/os.html#os.walk", "code_snippets": ["import os\nfrom os.path import join, getsize\nfor root, dirs, files in os.walk('python/Lib/email'):\n    print(root, \"consumes\", end=\" \")\n    print(sum(getsize(join(root, name)) for name in files), end=\" \")\n    print(\"bytes in\", len(files), \"non-directory files\")\n    if 'CVS' in dirs:\n        dirs.remove('CVS')  # don't visit CVS directories\n\n", "# Delete everything reachable from the directory named in \"top\",\n# assuming there are no symbolic links.\n# CAUTION:  This is dangerous!  For example, if top == '/', it\n# could delete all your disk files.\nimport os\nfor root, dirs, files in os.walk(top, topdown=False):\n    for name in files:\n        os.remove(os.path.join(root, name))\n    for name in dirs:\n        os.rmdir(os.path.join(root, name))\n\n"]},
{"title": "26.1.7. Classes, functions, and decorators: typing.ClassVar", "url": "http://localhost:8000/library/typing.html#typing.ClassVar", "code_snippets": ["enterprise_d = Starship(3000)\nenterprise_d.stats = {} # Error, setting class variable on instance\nStarship.stats = {}     # This is OK\n\n"]},
{"title": "26.1.7. Classes, functions, and decorators: typing.AnyStr", "url": "http://localhost:8000/library/typing.html#typing.AnyStr", "code_snippets": ["def concat(a: AnyStr, b: AnyStr) -> AnyStr:\n    return a + b\n\nconcat(u\"foo\", u\"bar\")  # Ok, output has type 'unicode'\nconcat(b\"foo\", b\"bar\")  # Ok, output has type 'bytes'\nconcat(u\"foo\", b\"bar\")  # Error, cannot mix unicode and bytes\n\n"]},
{"title": "16.1.5. Files and Directories: os.fwalk", "url": "http://localhost:8000/library/os.html#os.fwalk", "code_snippets": ["import os\nfor root, dirs, files, rootfd in os.fwalk('python/Lib/email'):\n    print(root, \"consumes\", end=\"\")\n    print(sum([os.stat(name, dir_fd=rootfd).st_size for name in files]),\n          end=\"\")\n    print(\"bytes in\", len(files), \"non-directory files\")\n    if 'CVS' in dirs:\n        dirs.remove('CVS')  # don't visit CVS directories\n\n", "# Delete everything reachable from the directory named in \"top\",\n# assuming there are no symbolic links.\n# CAUTION:  This is dangerous!  For example, if top == '/', it\n# could delete all your disk files.\nimport os\nfor root, dirs, files, rootfd in os.fwalk(top, topdown=False):\n    for name in files:\n        os.unlink(name, dir_fd=rootfd)\n    for name in dirs:\n        os.rmdir(name, dir_fd=rootfd)\n\n"]},
{"title": "21.19. : telnetlib.Telnet", "url": "http://localhost:8000/library/telnetlib.html#telnetlib.Telnet", "code_snippets": ["from telnetlib import Telnet\nwith Telnet('localhost', 23) as tn:\n    tn.interact()\n\n\n"]},
{"title": "29.7. : abc.abstractmethod", "url": "http://localhost:8000/library/abc.html#abc.abstractmethod", "code_snippets": ["class Descriptor:\n    \n    @property\n    def __isabstractmethod__(self):\n        return any(getattr(f, '__isabstractmethod__', False) for\n                   f in (self._fget, self._fset, self._fdel))\n\n"]},
{"title": "29.5.6. Available Functions: warnings.warn", "url": "http://localhost:8000/library/warnings.html#warnings.warn", "code_snippets": ["def deprecation(message):\n    warnings.warn(message, DeprecationWarning, stacklevel=2)\n\n"]},
{"title": "29.6.1. Utilities: contextlib.closing", "url": "http://localhost:8000/library/contextlib.html#contextlib.closing", "code_snippets": ["from contextlib import contextmanager\n\n@contextmanager\ndef closing(thing):\n    try:\n        yield thing\n    finally:\n        thing.close()\n\n", "from contextlib import closing\nfrom urllib.request import urlopen\n\nwith closing(urlopen('http://www.python.org')) as page:\n    for line in page:\n        print(line)\n\n"]},
{"title": "29.6.1. Utilities: contextlib.suppress", "url": "http://localhost:8000/library/contextlib.html#contextlib.suppress", "code_snippets": ["from contextlib import suppress\n\nwith suppress(FileNotFoundError):\n    os.remove('somefile.tmp')\n\nwith suppress(FileNotFoundError):\n    os.remove('someotherfile.tmp')\n\n", "try:\n    os.remove('somefile.tmp')\nexcept FileNotFoundError:\n    pass\n\ntry:\n    os.remove('someotherfile.tmp')\nexcept FileNotFoundError:\n    pass\n\n"]},
{"title": "29.6.1. Utilities: contextlib.redirect_stdout", "url": "http://localhost:8000/library/contextlib.html#contextlib.redirect_stdout", "code_snippets": ["f = io.StringIO()\nwith redirect_stdout(f):\n    help(pow)\ns = f.getvalue()\n\n", "with open('help.txt', 'w') as f:\n    with redirect_stdout(f):\n        help(pow)\n\n", "with redirect_stdout(sys.stderr):\n    help(pow)\n\n"]},
{"title": "29.6.1. Utilities: contextlib.ContextDecorator", "url": "http://localhost:8000/library/contextlib.html#contextlib.ContextDecorator", "code_snippets": ["from contextlib import ContextDecorator\n\nclass mycontext(ContextBaseClass, ContextDecorator):\n    def __enter__(self):\n        return self\n\n    def __exit__(self, *exc):\n        return False\n\n"]},
{"title": "16.1.6. Process Management: os.spawnl", "url": "http://localhost:8000/library/os.html#os.spawnl", "code_snippets": ["import os\nos.spawnlp(os.P_WAIT, 'cp', 'cp', 'index.html', '/dev/null')\n\nL = ['cp', 'index.html', '/dev/null']\nos.spawnvpe(os.P_WAIT, 'cp', L, os.environ)\n\n"]},
{"title": "29.6.1. Utilities: contextlib.ExitStack", "url": "http://localhost:8000/library/contextlib.html#contextlib.ExitStack", "code_snippets": ["with ExitStack() as stack:\n    files = [stack.enter_context(open(fname)) for fname in filenames]\n    # All opened files will automatically be closed at the end of\n    # the with statement, even if attempts to open files later\n    # in the list raise an exception\n\n"]},
{"title": "31.2. : pkgutil.extend_path", "url": "http://localhost:8000/library/pkgutil.html#pkgutil.extend_path", "code_snippets": ["from pkgutil import extend_path\n__path__ = extend_path(__path__, __name__)\n\n"]},
{"title": "29.1. : sys.displayhook", "url": "http://localhost:8000/library/sys.html#sys.displayhook", "code_snippets": ["def displayhook(value):\n    if value is None:\n        return\n    # Set '_' to None to avoid recursion\n    builtins._ = None\n    text = repr(value)\n    try:\n        sys.stdout.write(text)\n    except UnicodeEncodeError:\n        bytes = text.encode(sys.stdout.encoding, 'backslashreplace')\n        if hasattr(sys.stdout, 'buffer'):\n            sys.stdout.buffer.write(bytes)\n        else:\n            text = bytes.decode(sys.stdout.encoding, 'strict')\n            sys.stdout.write(text)\n    sys.stdout.write(\"\\n\")\n    builtins._ = value\n\n"]},
{"title": "31.2. : pkgutil.walk_packages", "url": "http://localhost:8000/library/pkgutil.html#pkgutil.walk_packages", "code_snippets": ["# list all modules python can access\nwalk_packages()\n\n# list all submodules of ctypes\nwalk_packages(ctypes.__path__, ctypes.__name__ + '.')\n\n"]},
{"title": "31.2. : pkgutil.get_data", "url": "http://localhost:8000/library/pkgutil.html#pkgutil.get_data", "code_snippets": ["d = os.path.dirname(sys.modules[package].__file__)\ndata = open(os.path.join(d, resource), 'rb').read()\n\n"]},
{"title": "31.5.2. Functions: importlib.reload", "url": "http://localhost:8000/library/importlib.html#importlib.reload", "code_snippets": ["try:\n    cache\nexcept NameError:\n    cache = {}\n\n"]},
{"title": "29.1. : sys.float_info", "url": "http://localhost:8000/library/sys.html#sys.float_info", "code_snippets": ["import sys\nsys.float_info.dig\n15\ns = '3.14159265358979'    # decimal string with 15 significant digits\nformat(float(s), '.15g')  # convert to float and back -> same value\n'3.14159265358979'\n\n", "s = '9876543211234567'    # 16 significant digits is too many!\nformat(float(s), '.16g')  # conversion changes value\n'9876543211234568'\n\n"]},
{"title": "32.2.1. Node classes: ast.AST", "url": "http://localhost:8000/library/ast.html#ast.AST", "code_snippets": ["node = ast.UnaryOp()\nnode.op = ast.USub()\nnode.operand = ast.Num()\nnode.operand.n = 5\nnode.operand.lineno = 0\nnode.operand.col_offset = 0\nnode.lineno = 0\nnode.col_offset = 0\n\n", "node = ast.UnaryOp(ast.USub(), ast.Num(5, lineno=0, col_offset=0),\n                   lineno=0, col_offset=0)\n\n"]},
{"title": "32.2.3. : ast.NodeTransformer", "url": "http://localhost:8000/library/ast.html#ast.NodeTransformer", "code_snippets": ["class RewriteName(NodeTransformer):\n\n    def visit_Name(self, node):\n        return copy_location(Subscript(\n            value=Name(id='data', ctx=Load()),\n            slice=Index(value=Str(s=node.id)),\n            ctx=node.ctx\n        ), node)\n\n", "node = YourTransformer().visit(node)\n\n"]},
{"title": "34.4. : winsound.SND_ALIAS", "url": "http://localhost:8000/library/winsound.html#winsound.SND_ALIAS", "code_snippets": ["import winsound\n# Play Windows exit sound.\nwinsound.PlaySound(\"SystemExit\", winsound.SND_ALIAS)\n\n# Probably play Windows default sound, if any is registered (because\n# \"*\" probably isn't the registered name of any sound).\nwinsound.PlaySound(\"*\", winsound.SND_ALIAS)\n\n"]},
{"title": "34.3.1. Functions: winreg.ExpandEnvironmentStrings", "url": "http://localhost:8000/library/winreg.html#winreg.ExpandEnvironmentStrings", "code_snippets": ["ExpandEnvironmentStrings('%windir%')\n'C:\\\\Windows'\n\n"]},
{"title": "35.9. : fcntl.ioctl", "url": "http://localhost:8000/library/fcntl.html#fcntl.ioctl", "code_snippets": ["import array, fcntl, struct, termios, os\nos.getpgrp()\n13341\nstruct.unpack('h', fcntl.ioctl(0, termios.TIOCGPGRP, \"  \"))[0]\n13341\nbuf = array.array('h', [0])\nfcntl.ioctl(0, termios.TIOCGPGRP, buf, 1)\n0\nbuf\narray('h', [13341])\n\n"]},
{"title": "29.1. : sys.set_coroutine_wrapper", "url": "http://localhost:8000/library/sys.html#sys.set_coroutine_wrapper", "code_snippets": ["def wrapper(coro):\n    async def wrap(coro):\n        return await coro\n    return wrap(coro)\nsys.set_coroutine_wrapper(wrapper)\n\nasync def foo():\n    pass\n\n# The following line will fail with a RuntimeError, because\n# ``wrapper`` creates a ``wrap(coro)`` coroutine:\nfoo()\n\n"]},
{"title": "18.9. : None", "url": "http://localhost:8000/library/mmap.html#module-mmap", "code_snippets": ["import mmap\n\n# write a simple example file\nwith open(\"hello.txt\", \"wb\") as f:\n    f.write(b\"Hello Python!\\n\")\n\nwith open(\"hello.txt\", \"r+b\") as f:\n    # memory-map the file, size 0 means whole file\n    mm = mmap.mmap(f.fileno(), 0)\n    # read content via standard file methods\n    print(mm.readline())  # prints b\"Hello Python!\\n\"\n    # read content via slice notation\n    print(mm[:5])  # prints b\"Hello\"\n    # update content using slice notation;\n    # note that new content must have same size\n    mm[6:] = b\" world!\\n\"\n    # ... and read again using standard file methods\n    mm.seek(0)\n    print(mm.readline())  # prints b\"Hello  world!\\n\"\n    # close the map\n    mm.close()\n\n", "import mmap\n\nwith mmap.mmap(-1, 13) as mm:\n    mm.write(b\"Hello world!\")\n\n", "import mmap\nimport os\n\nmm = mmap.mmap(-1, 13)\nmm.write(b\"Hello world!\")\n\npid = os.fork()\n\nif pid == 0:  # In a child process\n    mm.seek(0)\n    print(mm.readline())\n\n    mm.close()\n\n"]},
{"title": "36.2. : imp.reload", "url": "http://localhost:8000/library/imp.html#imp.reload", "code_snippets": ["try:\n    cache\nexcept NameError:\n    cache = {}\n\n"]},
{"title": "21.12.1. HTTPConnection Objects: http.client.HTTPConnection.set_tunnel", "url": "http://localhost:8000/library/http.client.html#http.client.HTTPConnection.set_tunnel", "code_snippets": ["import http.client\nconn = http.client.HTTPSConnection(\"localhost\", 8080)\nconn.set_tunnel(\"www.python.org\")\nconn.request(\"HEAD\",\"/index.html\")\n\n"]},
{"title": "21.15.1. IMAP4 Objects: imaplib.IMAP4.authenticate", "url": "http://localhost:8000/library/imaplib.html#imaplib.IMAP4.authenticate", "code_snippets": ["data = authobject(response)\n\n"]},
{"title": "21.16.1.2. Methods: nntplib.NNTP.getcapabilities", "url": "http://localhost:8000/library/nntplib.html#nntplib.NNTP.getcapabilities", "code_snippets": ["s = NNTP('news.gmane.org')\n'POST' in s.getcapabilities()\nTrue\n\n"]},
{"title": "20.13.2. ExpatError Exceptions: xml.parsers.expat.ExpatError.code", "url": "http://localhost:8000/library/pyexpat.html#xml.parsers.expat.ExpatError.code", "code_snippets": ["from xml.parsers.expat import ParserCreate, ExpatError, errors\n\np = ParserCreate()\ntry:\n    p.Parse(some_xml_document)\nexcept ExpatError as err:\n    print(\"Error:\", errors.messages[err.code])\n\n"]},
{"title": "21.17. : smtplib.SMTP", "url": "http://localhost:8000/library/smtplib.html#smtplib.SMTP", "code_snippets": ["from smtplib import SMTP\nwith SMTP(\"domain.org\") as smtp:\n    smtp.noop()\n\n(250, b'Ok')\n\n\n"]},
{"title": "21.16.1.2. Methods: nntplib.NNTP.newgroups", "url": "http://localhost:8000/library/nntplib.html#nntplib.NNTP.newgroups", "code_snippets": ["from datetime import date, timedelta\nresp, groups = s.newgroups(date.today() - timedelta(days=3))\nlen(groups) \n85\ngroups[0] \nGroupInfo(group='gmane.network.tor.devel', last='4', first='1', flag='m')\n\n"]},
{"title": "36.1.3.3. Defining options: optparse.OptionParser.add_option", "url": "http://localhost:8000/library/optparse.html#optparse.OptionParser.add_option", "code_snippets": ["parser.add_option(\"-f\", attr=value, )\n\n", "parser.add_option(\"--foo\", attr=value, )\n\n"]},
{"title": "21.16.1.2. Methods: nntplib.NNTP.descriptions", "url": "http://localhost:8000/library/nntplib.html#nntplib.NNTP.descriptions", "code_snippets": ["resp, descs = s.descriptions('gmane.comp.python.*')\nlen(descs) \n295\ndescs.popitem() \n('gmane.comp.python.bio.general', 'BioPython discussion list (Moderated)')\n\n"]},
{"title": "21.16.1.2. Methods: nntplib.NNTP.over", "url": "http://localhost:8000/library/nntplib.html#nntplib.NNTP.over", "code_snippets": ["_, _, first, last, _ = s.group('gmane.comp.python.devel')\nresp, overviews = s.over((last, last))\nart_num, over = overviews[0]\nart_num\n117216\nlist(over.keys())\n['xref', 'from', ':lines', ':bytes', 'references', 'date', 'message-id', 'subject']\nover['from']\n'=?UTF-8?B?Ik1hcnRpbiB2LiBMw7Z3aXMi?= <martin@v.loewis.de>'\nnntplib.decode_header(over['from'])\n'\"Martin v. L\u00f6wis\" <martin@v.loewis.de>'\n\n"]},
{"title": "21.12. : http.client.HTTPConnection", "url": "http://localhost:8000/library/http.client.html#http.client.HTTPConnection", "code_snippets": ["h1 = http.client.HTTPConnection('www.python.org')\nh2 = http.client.HTTPConnection('www.python.org:80')\nh3 = http.client.HTTPConnection('www.python.org', 80)\nh4 = http.client.HTTPConnection('www.python.org', 80, timeout=10)\n\n"]},
{"title": "21.16.1.2. Methods: nntplib.NNTP.stat", "url": "http://localhost:8000/library/nntplib.html#nntplib.NNTP.stat", "code_snippets": ["_, _, first, last, _ = s.group('gmane.comp.python.devel')\nresp, number, message_id = s.stat(first)\nnumber, message_id\n(9099, '<20030112190404.GE29873@epoch.metaslash.com>')\n\n"]},
{"title": "21.16.1.2. Methods: nntplib.NNTP.article", "url": "http://localhost:8000/library/nntplib.html#nntplib.NNTP.article", "code_snippets": ["resp, info = s.article('<20030112190404.GE29873@epoch.metaslash.com>')\ninfo.number\n0\ninfo.message_id\n'<20030112190404.GE29873@epoch.metaslash.com>'\nlen(info.lines)\n65\ninfo.lines[0]\nb'Path: main.gmane.org!not-for-mail'\ninfo.lines[1]\nb'From: Neal Norwitz <neal@metaslash.com>'\ninfo.lines[-3:]\n[b'There is a patch for 2.3 as well as 2.2.', b'', b'Neal']\n\n"]},
{"title": "21.15.1. IMAP4 Objects: imaplib.IMAP4.search", "url": "http://localhost:8000/library/imaplib.html#imaplib.IMAP4.search", "code_snippets": ["# M is a connected IMAP4 instance...\ntyp, msgnums = M.search(None, 'FROM', '\"LDJ\"')\n\n# or:\ntyp, msgnums = M.search(None, '(FROM \"LDJ\")')\n\n"]},
{"title": "21.13. : ftplib.FTP_TLS", "url": "http://localhost:8000/library/ftplib.html#ftplib.FTP_TLS", "code_snippets": ["ftps = FTP_TLS('ftp.pureftpd.org')\nftps.login()\n'230 Anonymous user logged in'\nftps.prot_p()\n'200 Data protection level set to \"private\"'\nftps.nlst()\n['6jack', 'OpenBSD', 'antilink', 'blogbench', 'bsdcam', 'clockspeed', 'djbdns-jedi', 'docs', 'eaccelerator-jedi', 'favicon.ico', 'francotone', 'fugu', 'ignore', 'libpuzzle', 'metalog', 'minidentd', 'misc', 'mysql-udf-global-user-variables', 'php-jenkins-hash', 'php-skein-hash', 'php-webdav', 'phpaudit', 'phpbench', 'pincaster', 'ping', 'posto', 'pub', 'public', 'public_keys', 'pure-ftpd', 'qscan', 'qtc', 'sharedance', 'skycache', 'sound', 'tmp', 'ucarp']\n\n"]},
{"title": "18.5.3.6. Task functions: asyncio.as_completed", "url": "http://localhost:8000/library/asyncio-task.html#asyncio.as_completed", "code_snippets": ["for f in as_completed(fs):\n    result = yield from f  # The 'yield from' may raise\n    # Use result\n\n"]},
{"title": "21.16.2. Utility functions: nntplib.decode_header", "url": "http://localhost:8000/library/nntplib.html#nntplib.decode_header", "code_snippets": ["decode_header(\"Some subject\")\n'Some subject'\ndecode_header(\"=?ISO-8859-15?Q?D=E9buter_en_Python?=\")\n'D\u00e9buter en Python'\ndecode_header(\"Re: =?UTF-8?B?cHJvYmzDqG1lIGRlIG1hdHJpY2U=?=\")\n'Re: probl\u00e8me de matrice'\n\n"]},
{"title": "21.16. : nntplib.NNTP", "url": "http://localhost:8000/library/nntplib.html#nntplib.NNTP", "code_snippets": ["from nntplib import NNTP\nwith NNTP('news.gmane.org') as n:\n    n.group('gmane.comp.python.committers')\n\n('211 1755 1 1755 gmane.comp.python.committers', 1755, 1, 1755, 'gmane.comp.python.committers')\n\n\n"]},
{"title": "36.1.3.11. Other methods: optparse.OptionParser.set_defaults", "url": "http://localhost:8000/library/optparse.html#optparse.OptionParser.set_defaults", "code_snippets": ["parser.add_option(\"--advanced\", action=\"store_const\",\n                  dest=\"mode\", const=\"advanced\",\n                  default=\"novice\")    # overridden below\nparser.add_option(\"--novice\", action=\"store_const\",\n                  dest=\"mode\", const=\"novice\",\n                  default=\"advanced\")  # overrides above setting\n\n", "parser.set_defaults(mode=\"advanced\")\nparser.add_option(\"--advanced\", action=\"store_const\",\n                  dest=\"mode\", const=\"advanced\")\nparser.add_option(\"--novice\", action=\"store_const\",\n                  dest=\"mode\", const=\"novice\")\n\n"]},
{"title": "21.15.1. IMAP4 Objects: imaplib.IMAP4.store", "url": "http://localhost:8000/library/imaplib.html#imaplib.IMAP4.store", "code_snippets": ["typ, data = M.search(None, 'ALL')\nfor num in data[0].split():\n   M.store(num, '+FLAGS', '\\\\Deleted')\nM.expunge()\n\n"]},
{"title": "18.5.3.6. Task functions: asyncio.run_coroutine_threadsafe", "url": "http://localhost:8000/library/asyncio-task.html#asyncio.run_coroutine_threadsafe", "code_snippets": ["# Create a coroutine\ncoro = asyncio.sleep(1, result=3)\n# Submit the coroutine to a given loop\nfuture = asyncio.run_coroutine_threadsafe(coro, loop)\n# Wait for the result with an optional timeout argument\nassert future.result(timeout) == 3\n\n", "try:\n    result = future.result(timeout)\nexcept asyncio.TimeoutError:\n    print('The coroutine took too long, cancelling the task...')\n    future.cancel()\nexcept Exception as exc:\n    print('The coroutine raised an exception: {!r}'.format(exc))\nelse:\n    print('The coroutine returned: {!r}'.format(result))\n\n"]},
{"title": "18.5.3.6. Task functions: asyncio.shield", "url": "http://localhost:8000/library/asyncio-task.html#asyncio.shield", "code_snippets": ["res = yield from shield(something())\n\n", "res = yield from something()\n\n", "try:\n    res = yield from shield(something())\nexcept CancelledError:\n    res = None\n\n"]},
{"title": "18.5.3.6. Task functions: asyncio.wait", "url": "http://localhost:8000/library/asyncio-task.html#asyncio.wait", "code_snippets": ["done, pending = yield from asyncio.wait(fs)\n\n"]},
{"title": "21.8.1. URL Parsing: urllib.parse.urlparse", "url": "http://localhost:8000/library/urllib.parse.html#urllib.parse.urlparse", "code_snippets": ["from urllib.parse import urlparse\no = urlparse('http://www.cwi.nl:80/%7Eguido/Python.html')\no   \nParseResult(scheme='http', netloc='www.cwi.nl:80', path='/%7Eguido/Python.html',\n            params='', query='', fragment='')\no.scheme\n'http'\no.port\n80\no.geturl()\n'http://www.cwi.nl:80/%7Eguido/Python.html'\n\n", "from urllib.parse import urlparse\nurlparse('//www.cwi.nl:80/%7Eguido/Python.html')\nParseResult(scheme='', netloc='www.cwi.nl:80', path='/%7Eguido/Python.html',\n           params='', query='', fragment='')\nurlparse('www.cwi.nl/%7Eguido/Python.html')\nParseResult(scheme='', netloc='', path='www.cwi.nl/%7Eguido/Python.html',\n           params='', query='', fragment='')\nurlparse('help/Python.html')\nParseResult(scheme='', netloc='', path='help/Python.html', params='',\n           query='', fragment='')\n\n"]},
{"title": "21.15. : imaplib.IMAP4", "url": "http://localhost:8000/library/imaplib.html#imaplib.IMAP4", "code_snippets": ["from imaplib import IMAP4\nwith IMAP4(\"domain.org\") as M:\n    M.noop()\n\n('OK', [b'Nothing Accomplished. d25if65hy903weo.87'])\n\n"]},
{"title": "18.5.3.6. Task functions: asyncio.wait_for", "url": "http://localhost:8000/library/asyncio-task.html#asyncio.wait_for", "code_snippets": ["result = yield from asyncio.wait_for(fut, 60.0)\n\n"]},
{"title": "18.5.1.1. Run an event loop: asyncio.AbstractEventLoop.shutdown_asyncgens", "url": "http://localhost:8000/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.shutdown_asyncgens", "code_snippets": ["try:\n    loop.run_forever()\nfinally:\n    loop.run_until_complete(loop.shutdown_asyncgens())\n    loop.close()\n\n"]},
{"title": "21.8.1. URL Parsing: urllib.parse.urljoin", "url": "http://localhost:8000/library/urllib.parse.html#urllib.parse.urljoin", "code_snippets": ["from urllib.parse import urljoin\nurljoin('http://www.cwi.nl/%7Eguido/Python.html', 'FAQ.html')\n'http://www.cwi.nl/%7Eguido/FAQ.html'\n\n", "urljoin('http://www.cwi.nl/%7Eguido/Python.html',\n        '//www.python.org/%7Eguido')\n'http://www.python.org/%7Eguido'\n\n"]},
{"title": "22.9.1. Audio Device Objects: ossaudiodev.oss_audio_device.setparameters", "url": "http://localhost:8000/library/ossaudiodev.html#ossaudiodev.oss_audio_device.setparameters", "code_snippets": ["(fmt, channels, rate) = dsp.setparameters(fmt, channels, rate)\n\n", "fmt = dsp.setfmt(fmt)\nchannels = dsp.channels(channels)\nrate = dsp.rate(rate)\n\n"]},
{"title": "21.8.3. Structured Parse Results: urllib.parse.urllib.parse.SplitResult.geturl", "url": "http://localhost:8000/library/urllib.parse.html#urllib.parse.urllib.parse.SplitResult.geturl", "code_snippets": ["from urllib.parse import urlsplit\nurl = 'HTTP://www.Python.org/doc/#'\nr1 = urlsplit(url)\nr1.geturl()\n'http://www.Python.org/doc/'\nr2 = urlsplit(r1.geturl())\nr2.geturl()\n'http://www.Python.org/doc/'\n\n"]},
{"title": "22.9.2. Mixer Device Objects: ossaudiodev.oss_mixer_device.controls", "url": "http://localhost:8000/library/ossaudiodev.html#ossaudiodev.oss_mixer_device.controls", "code_snippets": ["mixer=ossaudiodev.openmixer()\nif mixer.controls() & (1 << ossaudiodev.SOUND_MIXER_PCM):\n    # PCM is supported\n     code \n\n"]},
{"title": "22.9.2. Mixer Device Objects: ossaudiodev.oss_mixer_device.set_recsrc", "url": "http://localhost:8000/library/ossaudiodev.html#ossaudiodev.oss_mixer_device.set_recsrc", "code_snippets": ["mixer.setrecsrc (1 << ossaudiodev.SOUND_MIXER_MIC)\n\n"]},
{"title": "19.8. : binascii.crc32", "url": "http://localhost:8000/library/binascii.html#binascii.crc32", "code_snippets": ["print(binascii.crc32(b\"hello world\"))\n# Or, in two pieces:\ncrc = binascii.crc32(b\"hello\")\ncrc = binascii.crc32(b\" world\", crc)\nprint('crc32 = {:#010x}'.format(crc))\n\n"]},
{"title": "18.2.1.4. Certificate handling: ssl.enum_certificates", "url": "http://localhost:8000/library/ssl.html#ssl.enum_certificates", "code_snippets": ["ssl.enum_certificates(\"CA\")\n[(b'data...', 'x509_asn', {'1.3.6.1.5.5.7.3.1', '1.3.6.1.5.5.7.3.2'}),\n (b'data...', 'x509_asn', True)]\n\n"]},
{"title": "21.6.24. Legacy interface: urllib.request.urlretrieve", "url": "http://localhost:8000/library/urllib.request.html#urllib.request.urlretrieve", "code_snippets": ["import urllib.request\nlocal_filename, headers = urllib.request.urlretrieve('http://python.org/')\nhtml = open(local_filename)\nhtml.close()\n\n"]},
{"title": "20.5.3.2. Element Objects: xml.etree.ElementTree.Element", "url": "http://localhost:8000/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element", "code_snippets": ["element = root.find('foo')\n\nif not element:  # careful!\n    print(\"element not found, or element has no subelements\")\n\nif element is None:\n    print(\"element not found\")\n\n"]},
{"title": "18.2.1.5. Constants: ssl.OPENSSL_VERSION", "url": "http://localhost:8000/library/ssl.html#ssl.OPENSSL_VERSION", "code_snippets": ["ssl.OPENSSL_VERSION\n'OpenSSL 1.0.2k  26 Jan 2017'\n\n"]},
{"title": "18.2.1.5. Constants: ssl.OPENSSL_VERSION_INFO", "url": "http://localhost:8000/library/ssl.html#ssl.OPENSSL_VERSION_INFO", "code_snippets": ["ssl.OPENSSL_VERSION_INFO\n(1, 0, 2, 11, 15)\n\n"]},
{"title": "20.5.3.6. XMLParser Objects: xml.etree.ElementTree.XMLParser", "url": "http://localhost:8000/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLParser", "code_snippets": ["from xml.etree.ElementTree import XMLParser\nclass MaxDepth:                     # The target object of the parser\n    maxDepth = 0\n    depth = 0\n    def start(self, tag, attrib):   # Called for each opening tag.\n        self.depth += 1\n        if self.depth > self.maxDepth:\n            self.maxDepth = self.depth\n    def end(self, tag):             # Called for each closing tag.\n        self.depth -= 1\n    def data(self, data):\n        pass            # We do not need to do anything with data.\n    def close(self):    # Called when all data has been parsed.\n        return self.maxDepth\n\ntarget = MaxDepth()\nparser = XMLParser(target=target)\nexampleXml = \"\"\"\n<a>\n  <b>\n  </b>\n  <b>\n    <c>\n      <d>\n      </d>\n    </c>\n  </b>\n</a>\"\"\"\nparser.feed(exampleXml)\nparser.close()\n4\n\n"]},
{"title": "18.2.1.5. Constants: ssl.OPENSSL_VERSION_NUMBER", "url": "http://localhost:8000/library/ssl.html#ssl.OPENSSL_VERSION_NUMBER", "code_snippets": ["ssl.OPENSSL_VERSION_NUMBER\n268443839\nhex(ssl.OPENSSL_VERSION_NUMBER)\n'0x100020bf'\n\n"]},
{"title": "18.1.3. Socket Objects: socket.socket.recvmsg", "url": "http://localhost:8000/library/socket.html#socket.socket.recvmsg", "code_snippets": ["import socket, array\n\ndef recv_fds(sock, msglen, maxfds):\n    fds = array.array(\"i\")   # Array of ints\n    msg, ancdata, flags, addr = sock.recvmsg(msglen, socket.CMSG_LEN(maxfds * fds.itemsize))\n    for cmsg_level, cmsg_type, cmsg_data in ancdata:\n        if (cmsg_level == socket.SOL_SOCKET and cmsg_type == socket.SCM_RIGHTS):\n            # Append data, ignoring any truncated integers at the end.\n            fds.fromstring(cmsg_data[:len(cmsg_data) - (len(cmsg_data) % fds.itemsize)])\n    return msg, list(fds)\n\n"]},
{"title": "18.1.3. Socket Objects: socket.socket.recvmsg_into", "url": "http://localhost:8000/library/socket.html#socket.socket.recvmsg_into", "code_snippets": ["import socket\ns1, s2 = socket.socketpair()\nb1 = bytearray(b'----')\nb2 = bytearray(b'0123456789')\nb3 = bytearray(b'--------------')\ns1.send(b'Mary had a little lamb')\n22\ns2.recvmsg_into([b1, memoryview(b2)[2:9], b3])\n(22, [], 0, None)\n[b1, b2, b3]\n[bytearray(b'Mary'), bytearray(b'01 had a 9'), bytearray(b'little lamb---')]\n\n"]},
{"title": "18.2.2. SSL Sockets: ssl.SSLSocket.getpeercert", "url": "http://localhost:8000/library/ssl.html#ssl.SSLSocket.getpeercert", "code_snippets": ["{'issuer': ((('countryName', 'IL'),),\n            (('organizationName', 'StartCom Ltd.'),),\n            (('organizationalUnitName',\n              'Secure Digital Certificate Signing'),),\n            (('commonName',\n              'StartCom Class 2 Primary Intermediate Server CA'),)),\n 'notAfter': 'Nov 22 08:15:19 2013 GMT',\n 'notBefore': 'Nov 21 03:09:52 2011 GMT',\n 'serialNumber': '95F0',\n 'subject': ((('description', '571208-SLe257oHY9fVQ07Z'),),\n             (('countryName', 'US'),),\n             (('stateOrProvinceName', 'California'),),\n             (('localityName', 'San Francisco'),),\n             (('organizationName', 'Electronic Frontier Foundation, Inc.'),),\n             (('commonName', '*.eff.org'),),\n             (('emailAddress', 'hostmaster@eff.org'),)),\n 'subjectAltName': (('DNS', '*.eff.org'), ('DNS', 'eff.org')),\n 'version': 3}\n\n"]},
{"title": "18.1.3. Socket Objects: socket.socket.sendmsg", "url": "http://localhost:8000/library/socket.html#socket.socket.sendmsg", "code_snippets": ["import socket, array\n\ndef send_fds(sock, msg, fds):\n    return sock.sendmsg([msg], [(socket.SOL_SOCKET, socket.SCM_RIGHTS, array.array(\"i\", fds))])\n\n"]},
{"title": "19.1.6. : email.headerregistry.BaseHeader", "url": "http://localhost:8000/library/email.headerregistry.html#email.headerregistry.BaseHeader", "code_snippets": ["parse(string, kwds)\n\n", "def init(self, *args, **kw):\n    self._myattr = kw.pop('myattr')\n    super().init(*args, **kw)\n\n"]},
{"title": "19.1.6. : email.headerregistry.DateHeader", "url": "http://localhost:8000/library/email.headerregistry.html#email.headerregistry.DateHeader", "code_snippets": ["email.utils.format_datetime(self.datetime)\n\n", "msg['Date'] = datetime(2011, 7, 15, 21)\n\n", "msg['Date'] = utils.localtime()\n\n"]},
{"title": "19.1.6. : email.headerregistry.Address", "url": "http://localhost:8000/library/email.headerregistry.html#email.headerregistry.Address", "code_snippets": ["username@domain\n\n"]},
{"title": "18.2.3. SSL Contexts: ssl.SSLContext.cert_store_stats", "url": "http://localhost:8000/library/ssl.html#ssl.SSLContext.cert_store_stats", "code_snippets": ["context.cert_store_stats()\n{'crl': 0, 'x509_ca': 1, 'x509': 2}\n\n"]},
{"title": "19.1.14. : email.utils.getaddresses", "url": "http://localhost:8000/library/email.util.html#email.utils.getaddresses", "code_snippets": ["from email.utils import getaddresses\n\ntos = msg.get_all('to', [])\nccs = msg.get_all('cc', [])\nresent_tos = msg.get_all('resent-to', [])\nresent_ccs = msg.get_all('resent-cc', [])\nall_recipients = getaddresses(tos + ccs + resent_tos + resent_ccs)\n\n"]},
{"title": "19.1.11. : email.header.decode_header", "url": "http://localhost:8000/library/email.header.html#email.header.decode_header", "code_snippets": ["from email.header import decode_header\ndecode_header('=?iso-8859-1?q?p=F6stal?=')\n[(b'p\\xf6stal', 'iso-8859-1')]\n\n"]},
{"title": "18.2.3. SSL Contexts: ssl.SSLContext.get_ciphers", "url": "http://localhost:8000/library/ssl.html#ssl.SSLContext.get_ciphers", "code_snippets": ["ctx = ssl.SSLContext(ssl.PROTOCOL_SSLv23)\nctx.set_ciphers('ECDHE+AESGCM:!ECDSA')\nctx.get_ciphers()  # OpenSSL 1.0.x\n[{'alg_bits': 256,\n  'description': 'ECDHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=ECDH     Au=RSA  '\n                 'Enc=AESGCM(256) Mac=AEAD',\n  'id': 50380848,\n  'name': 'ECDHE-RSA-AES256-GCM-SHA384',\n  'protocol': 'TLSv1/SSLv3',\n  'strength_bits': 256},\n {'alg_bits': 128,\n  'description': 'ECDHE-RSA-AES128-GCM-SHA256 TLSv1.2 Kx=ECDH     Au=RSA  '\n                 'Enc=AESGCM(128) Mac=AEAD',\n  'id': 50380847,\n  'name': 'ECDHE-RSA-AES128-GCM-SHA256',\n  'protocol': 'TLSv1/SSLv3',\n  'strength_bits': 128}]\n\n"]},
{"title": "18.2.3. SSL Contexts: ssl.SSLContext.session_stats", "url": "http://localhost:8000/library/ssl.html#ssl.SSLContext.session_stats", "code_snippets": ["stats = context.session_stats()\nstats['hits'], stats['misses']\n(0, 0)\n\n"]},
{"title": "18.2.3. SSL Contexts: ssl.SSLContext.check_hostname", "url": "http://localhost:8000/library/ssl.html#ssl.SSLContext.check_hostname", "code_snippets": ["import socket, ssl\n\ncontext = ssl.SSLContext(ssl.PROTOCOL_TLSv1)\ncontext.verify_mode = ssl.CERT_REQUIRED\ncontext.check_hostname = True\ncontext.load_default_certs()\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nssl_sock = context.wrap_socket(s, server_hostname='www.verisign.com')\nssl_sock.connect(('www.verisign.com', 443))\n\n"]},
{"title": "19.1.4. : email.policy.strict", "url": "http://localhost:8000/library/email.policy.html#email.policy.strict", "code_snippets": ["somepolicy + policy.strict\n\n"]},
{"title": "8.11. : pprint.isreadable", "url": "http://localhost:8000/library/pprint.html#pprint.isreadable", "code_snippets": ["pprint.isreadable(stuff)\nFalse\n\n"]},
{"title": "8.11. : pprint.saferepr", "url": "http://localhost:8000/library/pprint.html#pprint.saferepr", "code_snippets": ["pprint.saferepr(stuff)\n\"[<Recursion on list with id=...>, 'spam', 'eggs', 'lumberjack', 'knights', 'ni']\"\n\n"]},
{"title": "6.4. : textwrap.fill", "url": "http://localhost:8000/library/textwrap.html#textwrap.fill", "code_snippets": ["\"\\n\".join(wrap(text, ))\n\n"]},
{"title": "6.4. : textwrap.shorten", "url": "http://localhost:8000/library/textwrap.html#textwrap.shorten", "code_snippets": ["textwrap.shorten(\"Hello  world!\", width=12)\n'Hello world!'\ntextwrap.shorten(\"Hello  world!\", width=11)\n'Hello [...]'\ntextwrap.shorten(\"Hello world\", width=10, placeholder=\"...\")\n'Hello...'\n\n"]},
{"title": "6.4. : textwrap.dedent", "url": "http://localhost:8000/library/textwrap.html#textwrap.dedent", "code_snippets": ["def test():\n    # end first line with \\ to avoid the empty line!\n    s = '''\\\n    hello\n      world\n    '''\n    print(repr(s))          # prints '    hello\\n      world\\n    '\n    print(repr(dedent(s)))  # prints 'hello\\n  world\\n'\n\n"]},
{"title": "6.3.1. SequenceMatcher Objects: None", "url": "http://localhost:8000/library/difflib.html#sequencematcher-objects", "code_snippets": ["lambda x: x in \" \\t\"\n\n"]},
{"title": "8.9.3. Additional Utility Classes and Functions: types.SimpleNamespace", "url": "http://localhost:8000/library/types.html#types.SimpleNamespace", "code_snippets": ["class SimpleNamespace:\n    def __init__(self, **kwargs):\n        self.__dict__.update(kwargs)\n\n    def __repr__(self):\n        keys = sorted(self.__dict__)\n        items = (\"{}={!r}\".format(k, self.__dict__[k]) for k in keys)\n        return \"{}({})\".format(type(self).__name__, \", \".join(items))\n\n    def __eq__(self, other):\n        return self.__dict__ == other.__dict__\n\n"]},
{"title": "6.4. : textwrap.indent", "url": "http://localhost:8000/library/textwrap.html#textwrap.indent", "code_snippets": ["s = 'hello\\n\\n \\nworld'\nindent(s, '  ')\n'  hello\\n\\n \\n  world'\n\n"]},
{"title": "6.4. : textwrap.TextWrapper", "url": "http://localhost:8000/library/textwrap.html#textwrap.TextWrapper", "code_snippets": ["wrapper = TextWrapper(initial_indent=\"* \")\n\n", "wrapper = TextWrapper()\nwrapper.initial_indent = \"* \"\n\n"]},
{"title": "6.2.1. Regular Expression Syntax: None", "url": "http://localhost:8000/library/re.html#regular-expression-syntax", "code_snippets": ["import re\nm = re.search('(?<=abc)def', 'abcdef')\nm.group(0)\n'def'\n\n", "m = re.search('(?<=-)\\w+', 'spam-egg')\nm.group(0)\n'egg'\n\n"]},
{"title": "6.3. : difflib.get_close_matches", "url": "http://localhost:8000/library/difflib.html#difflib.get_close_matches", "code_snippets": ["get_close_matches('appel', ['ape', 'apple', 'peach', 'puppy'])\n['apple', 'ape']\nimport keyword\nget_close_matches('wheel', keyword.kwlist)\n['while']\nget_close_matches('pineapple', keyword.kwlist)\n[]\nget_close_matches('accept', keyword.kwlist)\n['except']\n\n"]},
{"title": "6.2.2. Module Contents: re.compile", "url": "http://localhost:8000/library/re.html#re.compile", "code_snippets": ["prog = re.compile(pattern)\nresult = prog.match(string)\n\n", "result = re.match(pattern, string)\n\n"]},
{"title": "6.2.2. Module Contents: re.X", "url": "http://localhost:8000/library/re.html#re.X", "code_snippets": ["a = re.compile(r\"\"\"\\d +  # the integral part\n                   \\.    # the decimal point\n                   \\d *  # some fractional digits\"\"\", re.X)\nb = re.compile(r\"\\d+\\.\\d*\")\n\n"]},
{"title": "9.7.3. Function details: statistics.mean", "url": "http://localhost:8000/library/statistics.html#statistics.mean", "code_snippets": ["mean([1, 2, 3, 4, 4])\n2.8\nmean([-1.0, 2.5, 3.25, 5.75])\n2.625\n\nfrom fractions import Fraction as F\nmean([F(3, 7), F(1, 21), F(5, 3), F(1, 3)])\nFraction(13, 21)\n\nfrom decimal import Decimal as D\nmean([D(\"0.5\"), D(\"0.75\"), D(\"0.625\"), D(\"0.375\")])\nDecimal('0.5625')\n\n"]},
{"title": "6.3. : difflib.restore", "url": "http://localhost:8000/library/difflib.html#difflib.restore", "code_snippets": ["diff = ndiff('one\\ntwo\\nthree\\n'.splitlines(keepends=True),\n             'ore\\ntree\\nemu\\n'.splitlines(keepends=True))\ndiff = list(diff) # materialize the generated delta into a list\nprint(''.join(restore(diff, 1)), end=\"\")\none\ntwo\nthree\nprint(''.join(restore(diff, 2)), end=\"\")\nore\ntree\nemu\n\n"]},
{"title": "6.2.2. Module Contents: re.split", "url": "http://localhost:8000/library/re.html#re.split", "code_snippets": ["re.split('\\W+', 'Words, words, words.')\n['Words', 'words', 'words', '']\nre.split('(\\W+)', 'Words, words, words.')\n['Words', ', ', 'words', ', ', 'words', '.', '']\nre.split('\\W+', 'Words, words, words.', 1)\n['Words', 'words, words.']\nre.split('[a-f]+', '0a3B9', flags=re.IGNORECASE)\n['0', '3', '9']\n\n", "re.split('(\\W+)', '...words, words...')\n['', '...', 'words', ', ', 'words', '...', '']\n\n"]},
{"title": "9.7.3. Function details: statistics.harmonic_mean", "url": "http://localhost:8000/library/statistics.html#statistics.harmonic_mean", "code_snippets": ["harmonic_mean([2.5, 3, 10])  # For an equal investment portfolio.\n3.6\n\n"]},
{"title": "9.7.3. Function details: statistics.median", "url": "http://localhost:8000/library/statistics.html#statistics.median", "code_snippets": ["median([1, 3, 5])\n3\n\n", "median([1, 3, 5, 7])\n4.0\n\n"]},
{"title": "9.7.3. Function details: statistics.median_low", "url": "http://localhost:8000/library/statistics.html#statistics.median_low", "code_snippets": ["median_low([1, 3, 5])\n3\nmedian_low([1, 3, 5, 7])\n3\n\n"]},
{"title": "8.2. : calendar.setfirstweekday", "url": "http://localhost:8000/library/calendar.html#calendar.setfirstweekday", "code_snippets": ["import calendar\ncalendar.setfirstweekday(calendar.SUNDAY)\n\n"]},
{"title": "6.2.2. Module Contents: re.sub", "url": "http://localhost:8000/library/re.html#re.sub", "code_snippets": ["re.sub(r'def\\s+([a-zA-Z_][a-zA-Z_0-9]*)\\s*\\(\\s*\\):',\n       r'static PyObject*\\npy_\\1(void)\\n{',\n       'def myfunc():')\n'static PyObject*\\npy_myfunc(void)\\n{'\n\n", "def dashrepl(matchobj):\n    if matchobj.group(0) == '-': return ' '\n    else: return '-'\nre.sub('-{1,2}', dashrepl, 'pro----gram-files')\n'pro--gram files'\nre.sub(r'\\sAND\\s', ' & ', 'Baked Beans And Spam', flags=re.IGNORECASE)\n'Baked Beans & Spam'\n\n"]},
{"title": "9.5. : fractions.Fraction", "url": "http://localhost:8000/library/fractions.html#fractions.Fraction", "code_snippets": ["from fractions import Fraction\nFraction(16, -10)\nFraction(-8, 5)\nFraction(123)\nFraction(123, 1)\nFraction()\nFraction(0, 1)\nFraction('3/7')\nFraction(3, 7)\nFraction(' -3/7 ')\nFraction(-3, 7)\nFraction('1.414213 \\t\\n')\nFraction(1414213, 1000000)\nFraction('-.125')\nFraction(-1, 8)\nFraction('7e-6')\nFraction(7, 1000000)\nFraction(2.25)\nFraction(9, 4)\nFraction(1.1)\nFraction(2476979795053773, 2251799813685248)\nfrom decimal import Decimal\nFraction(Decimal('1.1'))\nFraction(11, 10)\n\n"]},
{"title": "9.7.3. Function details: statistics.median_high", "url": "http://localhost:8000/library/statistics.html#statistics.median_high", "code_snippets": ["median_high([1, 3, 5])\n3\nmedian_high([1, 3, 5, 7])\n5\n\n"]},
{"title": "9.7.3. Function details: statistics.median_grouped", "url": "http://localhost:8000/library/statistics.html#statistics.median_grouped", "code_snippets": ["median_grouped([52, 52, 53, 54])\n52.5\n\n", "median_grouped([1, 2, 2, 3, 4, 4, 4, 4, 4, 5])\n3.7\n\n", "median_grouped([1, 3, 3, 5, 7], interval=1)\n3.25\nmedian_grouped([1, 3, 3, 5, 7], interval=2)\n3.5\n\n"]},
{"title": "8.3.2. : collections.Counter", "url": "http://localhost:8000/library/collections.html#collections.Counter", "code_snippets": ["c = Counter()                           # a new, empty counter\nc = Counter('gallahad')                 # a new counter from an iterable\nc = Counter({'red': 4, 'blue': 2})      # a new counter from a mapping\nc = Counter(cats=4, dogs=8)             # a new counter from keyword args\n\n", "c = Counter(['eggs', 'ham'])\nc['bacon']                              # count of a missing element is zero\n0\n\n", "c['sausage'] = 0                        # counter entry with a zero count\ndel c['sausage']                        # del actually removes the entry\n\n"]},
{"title": "9.3.1. Conversions to and from polar coordinates: cmath.phase", "url": "http://localhost:8000/library/cmath.html#cmath.phase", "code_snippets": ["phase(complex(-1.0, 0.0))\n3.141592653589793\nphase(complex(-1.0, -0.0))\n-3.141592653589793\n\n"]},
{"title": "9.7.3. Function details: statistics.mode", "url": "http://localhost:8000/library/statistics.html#statistics.mode", "code_snippets": ["mode([1, 1, 2, 3, 3, 3, 3, 4])\n3\n\n", "mode([\"red\", \"blue\", \"blue\", \"red\", \"green\", \"red\", \"red\"])\n'red'\n\n"]},
{"title": "9.7.3. Function details: statistics.pstdev", "url": "http://localhost:8000/library/statistics.html#statistics.pstdev", "code_snippets": ["pstdev([1.5, 2.5, 2.5, 2.75, 3.25, 4.75])\n0.986893273527251\n\n"]},
{"title": "9.7.3. Function details: statistics.pvariance", "url": "http://localhost:8000/library/statistics.html#statistics.pvariance", "code_snippets": ["data = [0.0, 0.25, 0.25, 1.25, 1.5, 1.75, 2.75, 3.25]\npvariance(data)\n1.25\n\n", "mu = mean(data)\npvariance(data, mu)\n1.25\n\n", "from decimal import Decimal as D\npvariance([D(\"27.5\"), D(\"30.25\"), D(\"30.25\"), D(\"34.5\"), D(\"41.75\")])\nDecimal('24.815')\n\nfrom fractions import Fraction as F\npvariance([F(1, 4), F(5, 4), F(1, 2)])\nFraction(13, 72)\n\n"]},
{"title": "8.3.5. : collections.somenamedtuple._make", "url": "http://localhost:8000/library/collections.html#collections.somenamedtuple._make", "code_snippets": ["t = [11, 22]\nPoint._make(t)\nPoint(x=11, y=22)\n\n"]},
{"title": "9.7.3. Function details: statistics.stdev", "url": "http://localhost:8000/library/statistics.html#statistics.stdev", "code_snippets": ["stdev([1.5, 2.5, 2.5, 2.75, 3.25, 4.75])\n1.0810874155219827\n\n"]},
{"title": "9.7.3. Function details: statistics.variance", "url": "http://localhost:8000/library/statistics.html#statistics.variance", "code_snippets": ["data = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]\nvariance(data)\n1.3720238095238095\n\n", "m = mean(data)\nvariance(data, m)\n1.3720238095238095\n\n", "from decimal import Decimal as D\nvariance([D(\"27.5\"), D(\"30.25\"), D(\"30.25\"), D(\"34.5\"), D(\"41.75\")])\nDecimal('31.01875')\n\nfrom fractions import Fraction as F\nvariance([F(1, 6), F(1, 2), F(5, 3)])\nFraction(67, 108)\n\n"]},
{"title": "9.4.2. Decimal objects: decimal.Decimal", "url": "http://localhost:8000/library/decimal.html#decimal.Decimal", "code_snippets": ["(-7) % 4\n1\nDecimal(-7) % Decimal(4)\nDecimal('-3')\n\n", "-7 // 4\n-2\nDecimal(-7) // Decimal(4)\nDecimal('-1')\n\n"]},
{"title": "8.3.5. : collections.somenamedtuple._asdict", "url": "http://localhost:8000/library/collections.html#collections.somenamedtuple._asdict", "code_snippets": ["p = Point(x=11, y=22)\np._asdict()\nOrderedDict([('x', 11), ('y', 22)])\n\n"]},
{"title": "8.3.5. : collections.somenamedtuple._replace", "url": "http://localhost:8000/library/collections.html#collections.somenamedtuple._replace", "code_snippets": ["p = Point(x=11, y=22)\np._replace(x=33)\nPoint(x=33, y=22)\n\nfor partnum, record in inventory.items():\n    inventory[partnum] = record._replace(price=newprices[partnum], timestamp=time.now())\n\n"]},
{"title": "8.1.2. : datetime.timedelta", "url": "http://localhost:8000/library/datetime.html#datetime.timedelta", "code_snippets": ["from datetime import timedelta\nd = timedelta(microseconds=-1)\n(d.days, d.seconds, d.microseconds)\n(-1, 86399, 999999)\n\n"]},
{"title": "9.4.3. Context objects: decimal.localcontext", "url": "http://localhost:8000/library/decimal.html#decimal.localcontext", "code_snippets": ["from decimal import localcontext\n\nwith localcontext() as ctx:\n    ctx.prec = 42   # Perform a high precision calculation\n    s = calculate_something()\ns = +s  # Round the final result back to the default precision\n\n"]},
{"title": "9.2.1. Number-theoretic and representation functions: math.fsum", "url": "http://localhost:8000/library/math.html#math.fsum", "code_snippets": ["sum([.1, .1, .1, .1, .1, .1, .1, .1, .1, .1])\n0.9999999999999999\nfsum([.1, .1, .1, .1, .1, .1, .1, .1, .1, .1])\n1.0\n\n"]},
{"title": "8.3.5. : collections.somenamedtuple._fields", "url": "http://localhost:8000/library/collections.html#collections.somenamedtuple._fields", "code_snippets": ["p._fields            # view the field names\n('x', 'y')\n\nColor = namedtuple('Color', 'red green blue')\nPixel = namedtuple('Pixel', Point._fields + Color._fields)\nPixel(11, 22, 128, 255, 0)\nPixel(x=11, y=22, red=128, green=255, blue=0)\n\n"]},
{"title": "9.4.3. Context objects: decimal.Context", "url": "http://localhost:8000/library/decimal.html#decimal.Context", "code_snippets": ["Context(prec=6, Emax=999, clamp=1).create_decimal('1.23e999')\nDecimal('1.23000E+999')\n\n"]},
{"title": "6.2.4. Match Objects: re.match.group", "url": "http://localhost:8000/library/re.html#re.match.group", "code_snippets": ["m = re.match(r\"(\\w+) (\\w+)\", \"Isaac Newton, physicist\")\nm.group(0)       # The entire match\n'Isaac Newton'\nm.group(1)       # The first parenthesized subgroup.\n'Isaac'\nm.group(2)       # The second parenthesized subgroup.\n'Newton'\nm.group(1, 2)    # Multiple arguments give us a tuple.\n('Isaac', 'Newton')\n\n", "m = re.match(r\"(?P<first_name>\\w+) (?P<last_name>\\w+)\", \"Malcolm Reynolds\")\nm.group('first_name')\n'Malcolm'\nm.group('last_name')\n'Reynolds'\n\n", "m.group(1)\n'Malcolm'\nm.group(2)\n'Reynolds'\n\n", "m = re.match(r\"(..)+\", \"a1b2c3\")  # Matches 3 times.\nm.group(1)                        # Returns only the last match.\n'c3'\n\n"]},
{"title": "10.2. : functools.cmp_to_key", "url": "http://localhost:8000/library/functools.html#functools.cmp_to_key", "code_snippets": ["sorted(iterable, key=cmp_to_key(locale.strcoll))  # locale-aware sort order\n\n"]},
{"title": "9.2.2. Power and logarithmic functions: math.expm1", "url": "http://localhost:8000/library/math.html#math.expm1", "code_snippets": ["from math import exp, expm1\nexp(1e-5) - 1  # gives result accurate to 11 places\n1.0000050000069649e-05\nexpm1(1e-5)    # result accurate to full precision\n1.0000050000166668e-05\n\n"]},
{"title": "6.2.4. Match Objects: re.match.__getitem__", "url": "http://localhost:8000/library/re.html#re.match.__getitem__", "code_snippets": ["m = re.match(r\"(\\w+) (\\w+)\", \"Isaac Newton, physicist\")\nm[0]       # The entire match\n'Isaac Newton'\nm[1]       # The first parenthesized subgroup.\n'Isaac'\nm[2]       # The second parenthesized subgroup.\n'Newton'\n\n"]},
{"title": "6.2.4. Match Objects: re.match.groups", "url": "http://localhost:8000/library/re.html#re.match.groups", "code_snippets": ["m = re.match(r\"(\\d+)\\.(\\d+)\", \"24.1632\")\nm.groups()\n('24', '1632')\n\n", "m = re.match(r\"(\\d+)\\.?(\\d+)?\", \"24\")\nm.groups()      # Second group defaults to None.\n('24', None)\nm.groups('0')   # Now, the second group defaults to '0'.\n('24', '0')\n\n"]},
{"title": "10.2. : functools.total_ordering", "url": "http://localhost:8000/library/functools.html#functools.total_ordering", "code_snippets": ["@total_ordering\nclass Student:\n    def _is_valid_operand(self, other):\n        return (hasattr(other, \"lastname\") and\n                hasattr(other, \"firstname\"))\n    def __eq__(self, other):\n        if not self._is_valid_operand(other):\n            return NotImplemented\n        return ((self.lastname.lower(), self.firstname.lower()) ==\n                (other.lastname.lower(), other.firstname.lower()))\n    def __lt__(self, other):\n        if not self._is_valid_operand(other):\n            return NotImplemented\n        return ((self.lastname.lower(), self.firstname.lower()) <\n                (other.lastname.lower(), other.firstname.lower()))\n\n"]},
{"title": "11.10.1. Directory and files operations: shutil.which", "url": "http://localhost:8000/library/shutil.html#shutil.which", "code_snippets": ["shutil.which(\"python\")\n'C:\\\\Python33\\\\python.EXE'\n\n"]},
{"title": "9.4.6. Signals: decimal.InvalidOperation", "url": "http://localhost:8000/library/decimal.html#decimal.InvalidOperation", "code_snippets": ["Infinity - Infinity\n0 * Infinity\nInfinity / Infinity\nx % 0\nInfinity % x\nsqrt(-x) and x > 0\n0 ** 0\nx ** (non-integer)\nx ** Infinity\n\n"]},
{"title": "11.8. : fnmatch.fnmatch", "url": "http://localhost:8000/library/fnmatch.html#fnmatch.fnmatch", "code_snippets": ["import fnmatch\nimport os\n\nfor file in os.listdir('.'):\n    if fnmatch.fnmatch(file, '*.txt'):\n        print(file)\n\n"]},
{"title": "6.2.4. Match Objects: re.match.groupdict", "url": "http://localhost:8000/library/re.html#re.match.groupdict", "code_snippets": ["m = re.match(r\"(?P<first_name>\\w+) (?P<last_name>\\w+)\", \"Malcolm Reynolds\")\nm.groupdict()\n{'first_name': 'Malcolm', 'last_name': 'Reynolds'}\n\n"]},
{"title": "6.2.4. Match Objects: re.match.start", "url": "http://localhost:8000/library/re.html#re.match.start", "code_snippets": ["m.string[m.start(g):m.end(g)]\n\n", "email = \"tony@tiremove_thisger.net\"\nm = re.search(\"remove_this\", email)\nemail[:m.start()] + email[m.end():]\n'tony@tiger.net'\n\n"]},
{"title": "10.2. : functools.partial", "url": "http://localhost:8000/library/functools.html#functools.partial", "code_snippets": ["def partial(func, *args, **keywords):\n    def newfunc(*fargs, **fkeywords):\n        newkeywords = keywords.copy()\n        newkeywords.update(fkeywords)\n        return func(*args, *fargs, **newkeywords)\n    newfunc.func = func\n    newfunc.args = args\n    newfunc.keywords = keywords\n    return newfunc\n\n", "from functools import partial\nbasetwo = partial(int, base=2)\nbasetwo.__doc__ = 'Convert base 2 string to an int.'\nbasetwo('10010')\n18\n\n"]},
{"title": "10.1.1. Itertool functions: itertools.accumulate", "url": "http://localhost:8000/library/itertools.html#itertools.accumulate", "code_snippets": ["def accumulate(iterable, func=operator.add):\n    'Return running totals'\n    # accumulate([1,2,3,4,5]) --> 1 3 6 10 15\n    # accumulate([1,2,3,4,5], operator.mul) --> 1 2 6 24 120\n    it = iter(iterable)\n    try:\n        total = next(it)\n    except StopIteration:\n        return\n    yield total\n    for element in it:\n        total = func(total, element)\n        yield total\n\n", "data = [3, 4, 6, 2, 1, 9, 0, 7, 5, 8]\nlist(accumulate(data, operator.mul))     # running product\n[3, 12, 72, 144, 144, 1296, 0, 0, 0, 0]\nlist(accumulate(data, max))              # running maximum\n[3, 4, 6, 6, 6, 9, 9, 9, 9, 9]\n\n# Amortize a 5% loan of 1000 with 4 annual payments of 90\ncashflows = [1000, -90, -90, -90, -90]\nlist(accumulate(cashflows, lambda bal, pmt: bal*1.05 + pmt))\n[1000, 960.0, 918.0, 873.9000000000001, 827.5950000000001]\n\n# Chaotic recurrence relation https://en.wikipedia.org/wiki/Logistic_map\nlogistic_map = lambda x, _:  r * x * (1 - x)\nr = 3.8\nx0 = 0.4\ninputs = repeat(x0, 36)     # only the initial value is used\n[format(x, '.2f') for x in accumulate(inputs, logistic_map)]\n['0.40', '0.91', '0.30', '0.81', '0.60', '0.92', '0.29', '0.79', '0.63',\n '0.88', '0.39', '0.90', '0.33', '0.84', '0.52', '0.95', '0.18', '0.57',\n '0.93', '0.25', '0.71', '0.79', '0.63', '0.88', '0.39', '0.91', '0.32',\n '0.83', '0.54', '0.95', '0.20', '0.60', '0.91', '0.30', '0.80', '0.60']\n\n"]},
{"title": "10.2. : functools.partialmethod", "url": "http://localhost:8000/library/functools.html#functools.partialmethod", "code_snippets": ["class Cell(object):\n    def __init__(self):\n        self._alive = False\n    @property\n    def alive(self):\n        return self._alive\n    def set_state(self, state):\n        self._alive = bool(state)\n    set_alive = partialmethod(set_state, True)\n    set_dead = partialmethod(set_state, False)\n\nc = Cell()\nc.alive\nFalse\nc.set_alive()\nc.alive\nTrue\n\n"]},
{"title": "10.2. : functools.reduce", "url": "http://localhost:8000/library/functools.html#functools.reduce", "code_snippets": ["def reduce(function, iterable, initializer=None):\n    it = iter(iterable)\n    if initializer is None:\n        value = next(it)\n    else:\n        value = initializer\n    for element in it:\n        value = function(value, element)\n    return value\n\n"]},
{"title": "8.1.4. : datetime.datetime.utcfromtimestamp", "url": "http://localhost:8000/library/datetime.html#datetime.datetime.utcfromtimestamp", "code_snippets": ["datetime.fromtimestamp(timestamp, timezone.utc)\n\n", "datetime(1970, 1, 1, tzinfo=timezone.utc) + timedelta(seconds=timestamp)\n\n"]},
{"title": "11.3. : fileinput.input", "url": "http://localhost:8000/library/fileinput.html#fileinput.input", "code_snippets": ["with fileinput.input(files=('spam.txt', 'eggs.txt')) as f:\n    for line in f:\n        process(line)\n\n"]},
{"title": "10.1.1. Itertool functions: itertools.chain", "url": "http://localhost:8000/library/itertools.html#itertools.chain", "code_snippets": ["def chain(*iterables):\n    # chain('ABC', 'DEF') --> A B C D E F\n    for it in iterables:\n        for element in it:\n            yield element\n\n"]},
{"title": "10.1.1. Itertool functions: itertools.chain.from_iterable", "url": "http://localhost:8000/library/itertools.html#itertools.chain.from_iterable", "code_snippets": ["def from_iterable(iterables):\n    # chain.from_iterable(['ABC', 'DEF']) --> A B C D E F\n    for it in iterables:\n        for element in it:\n            yield element\n\n"]},
{"title": "10.1.1. Itertool functions: itertools.combinations", "url": "http://localhost:8000/library/itertools.html#itertools.combinations", "code_snippets": ["def combinations(iterable, r):\n    # combinations('ABCD', 2) --> AB AC AD BC BD CD\n    # combinations(range(4), 3) --> 012 013 023 123\n    pool = tuple(iterable)\n    n = len(pool)\n    if r > n:\n        return\n    indices = list(range(r))\n    yield tuple(pool[i] for i in indices)\n    while True:\n        for i in reversed(range(r)):\n            if indices[i] != i + n - r:\n                break\n        else:\n            return\n        indices[i] += 1\n        for j in range(i+1, r):\n            indices[j] = indices[j-1] + 1\n        yield tuple(pool[i] for i in indices)\n\n", "def combinations(iterable, r):\n    pool = tuple(iterable)\n    n = len(pool)\n    for indices in permutations(range(n), r):\n        if sorted(indices) == list(indices):\n            yield tuple(pool[i] for i in indices)\n\n"]},
{"title": "10.2. : functools.singledispatch", "url": "http://localhost:8000/library/functools.html#functools.singledispatch", "code_snippets": ["from functools import singledispatch\n@singledispatch\ndef fun(arg, verbose=False):\n    if verbose:\n        print(\"Let me just say,\", end=\" \")\n    print(arg)\n\n", "@fun.register(int)\ndef _(arg, verbose=False):\n    if verbose:\n        print(\"Strength in numbers, eh?\", end=\" \")\n    print(arg)\n\n@fun.register(list)\ndef _(arg, verbose=False):\n    if verbose:\n        print(\"Enumerate this:\")\n    for i, elem in enumerate(arg):\n        print(i, elem)\n\n", "def nothing(arg, verbose=False):\n    print(\"Nothing.\")\n\nfun.register(type(None), nothing)\n\n", "@fun.register(float)\n@fun.register(Decimal)\ndef fun_num(arg, verbose=False):\n    if verbose:\n        print(\"Half of your number:\", end=\" \")\n    print(arg / 2)\n\nfun_num is fun\nFalse\n\n"]},
{"title": "9.2.6. Special functions: math.erf", "url": "http://localhost:8000/library/math.html#math.erf", "code_snippets": ["def phi(x):\n    'Cumulative distribution function for the standard normal distribution'\n    return (1.0 + erf(x / sqrt(2.0))) / 2.0\n\n"]},
{"title": "10.1.1. Itertool functions: itertools.combinations_with_replacement", "url": "http://localhost:8000/library/itertools.html#itertools.combinations_with_replacement", "code_snippets": ["def combinations_with_replacement(iterable, r):\n    # combinations_with_replacement('ABC', 2) --> AA AB AC BB BC CC\n    pool = tuple(iterable)\n    n = len(pool)\n    if not n and r:\n        return\n    indices = [0] * r\n    yield tuple(pool[i] for i in indices)\n    while True:\n        for i in reversed(range(r)):\n            if indices[i] != n - 1:\n                break\n        else:\n            return\n        indices[i:] = [indices[i] + 1] * (r - i)\n        yield tuple(pool[i] for i in indices)\n\n", "def combinations_with_replacement(iterable, r):\n    pool = tuple(iterable)\n    n = len(pool)\n    for indices in product(range(n), repeat=r):\n        if sorted(indices) == list(indices):\n            yield tuple(pool[i] for i in indices)\n\n"]},
{"title": "11.3. : fileinput.FileInput", "url": "http://localhost:8000/library/fileinput.html#fileinput.FileInput", "code_snippets": ["with FileInput(files=('spam.txt', 'eggs.txt')) as input:\n    process(input)\n\n"]},
{"title": "10.1.1. Itertool functions: itertools.compress", "url": "http://localhost:8000/library/itertools.html#itertools.compress", "code_snippets": ["def compress(data, selectors):\n    # compress('ABCDEF', [1,0,1,0,1,1]) --> A C E F\n    return (d for d, s in zip(data, selectors) if s)\n\n"]},
{"title": "10.1.1. Itertool functions: itertools.count", "url": "http://localhost:8000/library/itertools.html#itertools.count", "code_snippets": ["def count(start=0, step=1):\n    # count(10) --> 10 11 12 13 14 ...\n    # count(2.5, 0.5) -> 2.5 3.0 3.5 ...\n    n = start\n    while True:\n        yield n\n        n += step\n\n"]},
{"title": "10.1.1. Itertool functions: itertools.cycle", "url": "http://localhost:8000/library/itertools.html#itertools.cycle", "code_snippets": ["def cycle(iterable):\n    # cycle('ABCD') --> A B C D A B C D A B C D ...\n    saved = []\n    for element in iterable:\n        yield element\n        saved.append(element)\n    while saved:\n        for element in saved:\n              yield element\n\n"]},
{"title": "11.1.2.3. Accessing individual parts: pathlib.PurePath.parts", "url": "http://localhost:8000/library/pathlib.html#pathlib.PurePath.parts", "code_snippets": ["p = PurePath('/usr/bin/python3')\np.parts\n('/', 'usr', 'bin', 'python3')\n\np = PureWindowsPath('c:/Program Files/PSF')\np.parts\n('c:\\\\', 'Program Files', 'PSF')\n\n"]},
{"title": "10.1.1. Itertool functions: itertools.dropwhile", "url": "http://localhost:8000/library/itertools.html#itertools.dropwhile", "code_snippets": ["def dropwhile(predicate, iterable):\n    # dropwhile(lambda x: x<5, [1,4,6,4,1]) --> 6 4 1\n    iterable = iter(iterable)\n    for x in iterable:\n        if not predicate(x):\n            yield x\n            break\n    for x in iterable:\n        yield x\n\n"]},
{"title": "10.1.1. Itertool functions: itertools.filterfalse", "url": "http://localhost:8000/library/itertools.html#itertools.filterfalse", "code_snippets": ["def filterfalse(predicate, iterable):\n    # filterfalse(lambda x: x%2, range(10)) --> 0 2 4 6 8\n    if predicate is None:\n        predicate = bool\n    for x in iterable:\n        if not predicate(x):\n            yield x\n\n"]},
{"title": "8.1.4. : datetime.datetime.astimezone", "url": "http://localhost:8000/library/datetime.html#datetime.datetime.astimezone", "code_snippets": ["def astimezone(self, tz):\n    if self.tzinfo is tz:\n        return self\n    # Convert self to UTC, and attach the new time zone object.\n    utc = (self - self.utcoffset()).replace(tzinfo=tz)\n    # Convert from UTC to tz's local time.\n    return tz.fromutc(utc)\n\n"]},
{"title": "11.1.2.4. Methods and properties: pathlib.PurePath.drive", "url": "http://localhost:8000/library/pathlib.html#pathlib.PurePath.drive", "code_snippets": ["PureWindowsPath('c:/Program Files/').drive\n'c:'\nPureWindowsPath('/Program Files/').drive\n''\nPurePosixPath('/etc').drive\n''\n\n", "PureWindowsPath('//host/share/foo.txt').drive\n'\\\\\\\\host\\\\share'\n\n"]},
{"title": "11.1.2.4. Methods and properties: pathlib.PurePath.root", "url": "http://localhost:8000/library/pathlib.html#pathlib.PurePath.root", "code_snippets": ["PureWindowsPath('c:/Program Files/').root\n'\\\\'\nPureWindowsPath('c:Program Files/').root\n''\nPurePosixPath('/etc').root\n'/'\n\n", "PureWindowsPath('//host/share').root\n'\\\\'\n\n"]},
{"title": "10.1.1. Itertool functions: itertools.groupby", "url": "http://localhost:8000/library/itertools.html#itertools.groupby", "code_snippets": ["groups = []\nuniquekeys = []\ndata = sorted(data, key=keyfunc)\nfor k, g in groupby(data, keyfunc):\n    groups.append(list(g))      # Store group iterator as a list\n    uniquekeys.append(k)\n\n", "class groupby:\n    # [k for k, g in groupby('AAAABBBCCDAABBB')] --> A B C D A B\n    # [list(g) for k, g in groupby('AAAABBBCCD')] --> AAAA BBB CC D\n    def __init__(self, iterable, key=None):\n        if key is None:\n            key = lambda x: x\n        self.keyfunc = key\n        self.it = iter(iterable)\n        self.tgtkey = self.currkey = self.currvalue = object()\n    def __iter__(self):\n        return self\n    def __next__(self):\n        while self.currkey == self.tgtkey:\n            self.currvalue = next(self.it)    # Exit on StopIteration\n            self.currkey = self.keyfunc(self.currvalue)\n        self.tgtkey = self.currkey\n        return (self.currkey, self._grouper(self.tgtkey))\n    def _grouper(self, tgtkey):\n        while self.currkey == tgtkey:\n            yield self.currvalue\n            try:\n                self.currvalue = next(self.it)\n            except StopIteration:\n                return\n            self.currkey = self.keyfunc(self.currvalue)\n\n"]},
{"title": "8.1.4. : datetime.datetime.timestamp", "url": "http://localhost:8000/library/datetime.html#datetime.datetime.timestamp", "code_snippets": ["(dt - datetime(1970, 1, 1, tzinfo=timezone.utc)).total_seconds()\n\n"]},
{"title": "11.1.2.4. Methods and properties: pathlib.PurePath.anchor", "url": "http://localhost:8000/library/pathlib.html#pathlib.PurePath.anchor", "code_snippets": ["PureWindowsPath('c:/Program Files/').anchor\n'c:\\\\'\nPureWindowsPath('c:Program Files/').anchor\n'c:'\nPurePosixPath('/etc').anchor\n'/'\nPureWindowsPath('//host/share').anchor\n'\\\\\\\\host\\\\share\\\\'\n\n"]},
{"title": "11.1.2.4. Methods and properties: pathlib.PurePath.parents", "url": "http://localhost:8000/library/pathlib.html#pathlib.PurePath.parents", "code_snippets": ["p = PureWindowsPath('c:/foo/bar/setup.py')\np.parents[0]\nPureWindowsPath('c:/foo/bar')\np.parents[1]\nPureWindowsPath('c:/foo')\np.parents[2]\nPureWindowsPath('c:/')\n\n"]},
{"title": "11.1.2.4. Methods and properties: pathlib.PurePath.parent", "url": "http://localhost:8000/library/pathlib.html#pathlib.PurePath.parent", "code_snippets": ["p = PurePosixPath('/a/b/c/d')\np.parent\nPurePosixPath('/a/b/c')\n\n", "p = PurePosixPath('/')\np.parent\nPurePosixPath('/')\np = PurePosixPath('.')\np.parent\nPurePosixPath('.')\n\n"]},
{"title": "10.1.1. Itertool functions: itertools.islice", "url": "http://localhost:8000/library/itertools.html#itertools.islice", "code_snippets": ["def islice(iterable, *args):\n    # islice('ABCDEFG', 2) --> A B\n    # islice('ABCDEFG', 2, 4) --> C D\n    # islice('ABCDEFG', 2, None) --> C D E F G\n    # islice('ABCDEFG', 0, None, 2) --> A C E G\n    s = slice(*args)\n    it = iter(range(s.start or 0, s.stop or sys.maxsize, s.step or 1))\n    try:\n        nexti = next(it)\n    except StopIteration:\n        return\n    for i, element in enumerate(iterable):\n        if i == nexti:\n            yield element\n            nexti = next(it)\n\n"]},
{"title": "10.1.1. Itertool functions: itertools.permutations", "url": "http://localhost:8000/library/itertools.html#itertools.permutations", "code_snippets": ["def permutations(iterable, r=None):\n    # permutations('ABCD', 2) --> AB AC AD BA BC BD CA CB CD DA DB DC\n    # permutations(range(3)) --> 012 021 102 120 201 210\n    pool = tuple(iterable)\n    n = len(pool)\n    r = n if r is None else r\n    if r > n:\n        return\n    indices = list(range(n))\n    cycles = list(range(n, n-r, -1))\n    yield tuple(pool[i] for i in indices[:r])\n    while n:\n        for i in reversed(range(r)):\n            cycles[i] -= 1\n            if cycles[i] == 0:\n                indices[i:] = indices[i+1:] + indices[i:i+1]\n                cycles[i] = n - i\n            else:\n                j = cycles[i]\n                indices[i], indices[-j] = indices[-j], indices[i]\n                yield tuple(pool[i] for i in indices[:r])\n                break\n        else:\n            return\n\n", "def permutations(iterable, r=None):\n    pool = tuple(iterable)\n    n = len(pool)\n    r = n if r is None else r\n    for indices in product(range(n), repeat=r):\n        if len(set(indices)) == r:\n            yield tuple(pool[i] for i in indices)\n\n"]},
{"title": "8.1.4. : datetime.datetime.isoformat", "url": "http://localhost:8000/library/datetime.html#datetime.datetime.isoformat", "code_snippets": ["from datetime import tzinfo, timedelta, datetime\nclass TZ(tzinfo):\n    def utcoffset(self, dt): return timedelta(minutes=-399)\n\ndatetime(2002, 12, 25, tzinfo=TZ()).isoformat(' ')\n'2002-12-25 00:00:00-06:39'\n\n", "from datetime import datetime\ndatetime.now().isoformat(timespec='minutes')\n'2002-12-25T00:00'\ndt = datetime(2015, 1, 1, 12, 30, 59, 0)\ndt.isoformat(timespec='microseconds')\n'2015-01-01T12:30:59.000000'\n\n"]},
{"title": "11.1.2.4. Methods and properties: pathlib.PurePath.name", "url": "http://localhost:8000/library/pathlib.html#pathlib.PurePath.name", "code_snippets": ["PurePosixPath('my/library/setup.py').name\n'setup.py'\n\n", "PureWindowsPath('//some/share/setup.py').name\n'setup.py'\nPureWindowsPath('//some/share').name\n''\n\n"]},
{"title": "11.1.2.4. Methods and properties: pathlib.PurePath.suffix", "url": "http://localhost:8000/library/pathlib.html#pathlib.PurePath.suffix", "code_snippets": ["PurePosixPath('my/library/setup.py').suffix\n'.py'\nPurePosixPath('my/library.tar.gz').suffix\n'.gz'\nPurePosixPath('my/library').suffix\n''\n\n"]},
{"title": "11.1.2.4. Methods and properties: pathlib.PurePath.suffixes", "url": "http://localhost:8000/library/pathlib.html#pathlib.PurePath.suffixes", "code_snippets": ["PurePosixPath('my/library.tar.gar').suffixes\n['.tar', '.gar']\nPurePosixPath('my/library.tar.gz').suffixes\n['.tar', '.gz']\nPurePosixPath('my/library').suffixes\n[]\n\n"]},
{"title": "10.1.1. Itertool functions: itertools.product", "url": "http://localhost:8000/library/itertools.html#itertools.product", "code_snippets": ["def product(*args, repeat=1):\n    # product('ABCD', 'xy') --> Ax Ay Bx By Cx Cy Dx Dy\n    # product(range(2), repeat=3) --> 000 001 010 011 100 101 110 111\n    pools = [tuple(pool) for pool in args] * repeat\n    result = [[]]\n    for pool in pools:\n        result = [x+[y] for x in result for y in pool]\n    for prod in result:\n        yield tuple(prod)\n\n"]},
{"title": "10.1.1. Itertool functions: itertools.repeat", "url": "http://localhost:8000/library/itertools.html#itertools.repeat", "code_snippets": ["def repeat(object, times=None):\n    # repeat(10, 3) --> 10 10 10\n    if times is None:\n        while True:\n            yield object\n    else:\n        for i in range(times):\n            yield object\n\n", "list(map(pow, range(10), repeat(2)))\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\n"]},
{"title": "11.1.2.4. Methods and properties: pathlib.PurePath.stem", "url": "http://localhost:8000/library/pathlib.html#pathlib.PurePath.stem", "code_snippets": ["PurePosixPath('my/library.tar.gz').stem\n'library.tar'\nPurePosixPath('my/library.tar').stem\n'library'\nPurePosixPath('my/library').stem\n'library'\n\n"]},
{"title": "11.1.2.4. Methods and properties: pathlib.PurePath.as_posix", "url": "http://localhost:8000/library/pathlib.html#pathlib.PurePath.as_posix", "code_snippets": ["p = PureWindowsPath('c:\\\\windows')\nstr(p)\n'c:\\\\windows'\np.as_posix()\n'c:/windows'\n\n"]},
{"title": "11.1.2.4. Methods and properties: pathlib.PurePath.as_uri", "url": "http://localhost:8000/library/pathlib.html#pathlib.PurePath.as_uri", "code_snippets": ["p = PurePosixPath('/etc/passwd')\np.as_uri()\n'file:///etc/passwd'\np = PureWindowsPath('c:/Windows')\np.as_uri()\n'file:///c:/Windows'\n\n"]},
{"title": "10.1.1. Itertool functions: itertools.starmap", "url": "http://localhost:8000/library/itertools.html#itertools.starmap", "code_snippets": ["def starmap(function, iterable):\n    # starmap(pow, [(2,5), (3,2), (10,3)]) --> 32 9 1000\n    for args in iterable:\n        yield function(*args)\n\n"]},
{"title": "10.1.1. Itertool functions: itertools.takewhile", "url": "http://localhost:8000/library/itertools.html#itertools.takewhile", "code_snippets": ["def takewhile(predicate, iterable):\n    # takewhile(lambda x: x<5, [1,4,6,4,1]) --> 1 4\n    for x in iterable:\n        if predicate(x):\n            yield x\n        else:\n            break\n\n"]},
{"title": "10.1.1. Itertool functions: itertools.tee", "url": "http://localhost:8000/library/itertools.html#itertools.tee", "code_snippets": ["def tee(iterable, n=2):\n    it = iter(iterable)\n    deques = [collections.deque() for i in range(n)]\n    def gen(mydeque):\n        while True:\n            if not mydeque:             # when the local deque is empty\n                try:\n                    newval = next(it)   # fetch a new value and\n                except StopIteration:\n                    return\n                for d in deques:        # load it to all the deques\n                    d.append(newval)\n            yield mydeque.popleft()\n    return tuple(gen(d) for d in deques)\n\n"]},
{"title": "11.1.2.4. Methods and properties: pathlib.PurePath.is_absolute", "url": "http://localhost:8000/library/pathlib.html#pathlib.PurePath.is_absolute", "code_snippets": ["PurePosixPath('/a/b').is_absolute()\nTrue\nPurePosixPath('a/b').is_absolute()\nFalse\n\nPureWindowsPath('c:/a/b').is_absolute()\nTrue\nPureWindowsPath('/a/b').is_absolute()\nFalse\nPureWindowsPath('c:').is_absolute()\nFalse\nPureWindowsPath('//some/share').is_absolute()\nTrue\n\n"]},
{"title": "11.1.2.4. Methods and properties: pathlib.PurePath.is_reserved", "url": "http://localhost:8000/library/pathlib.html#pathlib.PurePath.is_reserved", "code_snippets": ["PureWindowsPath('nul').is_reserved()\nTrue\nPurePosixPath('nul').is_reserved()\nFalse\n\n"]},
{"title": "11.1.2.4. Methods and properties: pathlib.PurePath.joinpath", "url": "http://localhost:8000/library/pathlib.html#pathlib.PurePath.joinpath", "code_snippets": ["PurePosixPath('/etc').joinpath('passwd')\nPurePosixPath('/etc/passwd')\nPurePosixPath('/etc').joinpath(PurePosixPath('passwd'))\nPurePosixPath('/etc/passwd')\nPurePosixPath('/etc').joinpath('init.d', 'apache2')\nPurePosixPath('/etc/init.d/apache2')\nPureWindowsPath('c:').joinpath('/Program Files')\nPureWindowsPath('c:/Program Files')\n\n"]},
{"title": "10.1.1. Itertool functions: itertools.zip_longest", "url": "http://localhost:8000/library/itertools.html#itertools.zip_longest", "code_snippets": ["class ZipExhausted(Exception):\n    pass\n\ndef zip_longest(*args, **kwds):\n    # zip_longest('ABCD', 'xy', fillvalue='-') --> Ax By C- D-\n    fillvalue = kwds.get('fillvalue')\n    counter = len(args) - 1\n    def sentinel():\n        nonlocal counter\n        if not counter:\n            raise ZipExhausted\n        counter -= 1\n        yield fillvalue\n    fillers = repeat(fillvalue)\n    iterators = [chain(it, sentinel(), fillers) for it in args]\n    try:\n        while iterators:\n            yield tuple(map(next, iterators))\n    except ZipExhausted:\n        pass\n\n"]},
{"title": "8.1.5. : datetime.time.isoformat", "url": "http://localhost:8000/library/datetime.html#datetime.time.isoformat", "code_snippets": ["from datetime import time\ntime(hour=12, minute=34, second=56, microsecond=123456).isoformat(timespec='minutes')\n'12:34'\ndt = time(hour=12, minute=34, second=56, microsecond=0)\ndt.isoformat(timespec='microseconds')\n'12:34:56.000000'\ndt.isoformat(timespec='auto')\n'12:34:56'\n\n"]},
{"title": "11.1.2.4. Methods and properties: pathlib.PurePath.match", "url": "http://localhost:8000/library/pathlib.html#pathlib.PurePath.match", "code_snippets": ["PurePath('a/b.py').match('*.py')\nTrue\nPurePath('/a/b/c.py').match('b/*.py')\nTrue\nPurePath('/a/b/c.py').match('a/*.py')\nFalse\n\n", "PurePath('/a.py').match('/*.py')\nTrue\nPurePath('a/b.py').match('/*.py')\nFalse\n\n", "PureWindowsPath('b.py').match('*.PY')\nTrue\n\n"]},
{"title": "11.1.2.4. Methods and properties: pathlib.PurePath.with_suffix", "url": "http://localhost:8000/library/pathlib.html#pathlib.PurePath.with_suffix", "code_snippets": ["p = PureWindowsPath('c:/Downloads/pathlib.tar.gz')\np.with_suffix('.bz2')\nPureWindowsPath('c:/Downloads/pathlib.tar.bz2')\np = PureWindowsPath('README')\np.with_suffix('.txt')\nPureWindowsPath('README.txt')\n\n"]},
{"title": "11.1.2. Pure paths: pathlib.PurePath", "url": "http://localhost:8000/library/pathlib.html#pathlib.PurePath", "code_snippets": ["PurePath('setup.py')      # Running on a Unix machine\nPurePosixPath('setup.py')\n\n", "PurePath('foo', 'some/path', 'bar')\nPurePosixPath('foo/some/path/bar')\nPurePath(Path('foo'), Path('bar'))\nPurePosixPath('foo/bar')\n\n", "PurePath()\nPurePosixPath('.')\n\n", "PurePath('/etc', '/usr', 'lib64')\nPurePosixPath('/usr/lib64')\nPureWindowsPath('c:/Windows', 'd:bar')\nPureWindowsPath('d:bar')\n\n", "PureWindowsPath('c:/Windows', '/Program Files')\nPureWindowsPath('c:/Program Files')\n\n", "PurePath('foo//bar')\nPurePosixPath('foo/bar')\nPurePath('foo/./bar')\nPurePosixPath('foo/bar')\nPurePath('foo/../bar')\nPurePosixPath('foo/../bar')\n\n"]},
{"title": "8.1.6. : datetime.tzinfo.utcoffset", "url": "http://localhost:8000/library/datetime.html#datetime.tzinfo.utcoffset", "code_snippets": ["return CONSTANT                 # fixed-offset class\nreturn CONSTANT + self.dst(dt)  # daylight-aware class\n\n"]},
{"title": "8.1.6. : datetime.tzinfo.dst", "url": "http://localhost:8000/library/datetime.html#datetime.tzinfo.dst", "code_snippets": ["def dst(self, dt):\n    # a fixed-offset class:  doesn't account for DST\n    return timedelta(0)\n\n", "def dst(self, dt):\n    # Code to set dston and dstoff to the time zone's DST\n    # transition times based on the input dt.year, and expressed\n    # in standard local time.  Then\n\n    if dston <= dt.replace(tzinfo=None) < dstoff:\n        return timedelta(hours=1)\n    else:\n        return timedelta(0)\n\n"]},
{"title": "11.1.2. Pure paths: pathlib.PurePosixPath", "url": "http://localhost:8000/library/pathlib.html#pathlib.PurePosixPath", "code_snippets": ["PurePosixPath('/etc')\nPurePosixPath('/etc')\n\n"]},
{"title": "11.1.2. Pure paths: pathlib.PureWindowsPath", "url": "http://localhost:8000/library/pathlib.html#pathlib.PureWindowsPath", "code_snippets": ["PureWindowsPath('c:/Program Files/')\nPureWindowsPath('c:/Program Files')\n\n"]},
{"title": "11.1.3.1. Methods: pathlib.Path.cwd", "url": "http://localhost:8000/library/pathlib.html#pathlib.Path.cwd", "code_snippets": ["Path.cwd()\nPosixPath('/home/antoine/pathlib')\n\n"]},
{"title": "15.3.2. Generating tokens: secrets.token_bytes", "url": "http://localhost:8000/library/secrets.html#secrets.token_bytes", "code_snippets": ["token_bytes(16)  \nb'\\xebr\\x17D*t\\xae\\xd4\\xe3S\\xb6\\xe2\\xebP1\\x8b'\n\n"]},
{"title": "15.3.2. Generating tokens: secrets.token_hex", "url": "http://localhost:8000/library/secrets.html#secrets.token_hex", "code_snippets": ["token_hex(16)  \n'f9bf78b9a18ce6d46a0cd2b0b86df9da'\n\n"]},
{"title": "15.3.2. Generating tokens: secrets.token_urlsafe", "url": "http://localhost:8000/library/secrets.html#secrets.token_urlsafe", "code_snippets": ["token_urlsafe(16)  \n'Drmhze6EPcv0fN_81Bj-nA'\n\n"]},
{"title": "8.1.6. : datetime.tzinfo.fromutc", "url": "http://localhost:8000/library/datetime.html#datetime.tzinfo.fromutc", "code_snippets": ["def fromutc(self, dt):\n    # raise ValueError error if dt.tzinfo is not self\n    dtoff = dt.utcoffset()\n    dtdst = dt.dst()\n    # raise ValueError if dtoff is None or dtdst is None\n    delta = dtoff - dtdst  # this is self's standard offset\n    if delta:\n        dt += delta   # convert to standard local time\n        dtdst = dt.dst()\n        # raise ValueError if dtdst is None\n    if dtdst:\n        return dt + dtdst\n    else:\n        return dt\n\n"]},
{"title": "14.4.1. Packer Objects: xdrlib.Packer.pack_list", "url": "http://localhost:8000/library/xdrlib.html#xdrlib.Packer.pack_list", "code_snippets": ["import xdrlib\np = xdrlib.Packer()\np.pack_list([1, 2, 3], p.pack_int)\n\n"]},
{"title": "11.1.3.1. Methods: pathlib.Path.home", "url": "http://localhost:8000/library/pathlib.html#pathlib.Path.home", "code_snippets": ["Path.home()\nPosixPath('/home/antoine')\n\n"]},
{"title": "11.1.3.1. Methods: pathlib.Path.stat", "url": "http://localhost:8000/library/pathlib.html#pathlib.Path.stat", "code_snippets": ["p = Path('setup.py')\np.stat().st_size\n956\np.stat().st_mtime\n1327883547.852554\n\n"]},
{"title": "11.1.3.1. Methods: pathlib.Path.chmod", "url": "http://localhost:8000/library/pathlib.html#pathlib.Path.chmod", "code_snippets": ["p = Path('setup.py')\np.stat().st_mode\n33277\np.chmod(0o444)\np.stat().st_mode\n33060\n\n"]},
{"title": "14.1.1. Module Contents: csv.writer", "url": "http://localhost:8000/library/csv.html#csv.writer", "code_snippets": ["import csv\nwith open('eggs.csv', 'w', newline='') as csvfile:\n    spamwriter = csv.writer(csvfile, delimiter=' ',\n                            quotechar='|', quoting=csv.QUOTE_MINIMAL)\n    spamwriter.writerow(['Spam'] * 5 + ['Baked Beans'])\n    spamwriter.writerow(['Spam', 'Lovely Spam', 'Wonderful Spam'])\n\n"]},
{"title": "14.2.7. Customizing Parser Behaviour: configparser.optionxform", "url": "http://localhost:8000/library/configparser.html#configparser.optionxform", "code_snippets": ["config = \"\"\"\n[Section1]\nKey = Value\n\n[Section2]\nAnotherKey = Value\n\"\"\"\ntypical = configparser.ConfigParser()\ntypical.read_string(config)\nlist(typical['Section1'].keys())\n['key']\nlist(typical['Section2'].keys())\n['anotherkey']\ncustom = configparser.RawConfigParser()\ncustom.optionxform = lambda option: option\ncustom.read_string(config)\nlist(custom['Section1'].keys())\n['Key']\nlist(custom['Section2'].keys())\n['AnotherKey']\n\n"]},
{"title": "11.1.3.1. Methods: pathlib.Path.exists", "url": "http://localhost:8000/library/pathlib.html#pathlib.Path.exists", "code_snippets": ["Path('.').exists()\nTrue\nPath('setup.py').exists()\nTrue\nPath('/etc').exists()\nTrue\nPath('nonexistentfile').exists()\nFalse\n\n"]},
{"title": "11.1.3.1. Methods: pathlib.Path.expanduser", "url": "http://localhost:8000/library/pathlib.html#pathlib.Path.expanduser", "code_snippets": ["p = PosixPath('~/films/Monty Python')\np.expanduser()\nPosixPath('/home/eric/films/Monty Python')\n\n"]},
{"title": "11.1.3.1. Methods: pathlib.Path.glob", "url": "http://localhost:8000/library/pathlib.html#pathlib.Path.glob", "code_snippets": ["sorted(Path('.').glob('*.py'))\n[PosixPath('pathlib.py'), PosixPath('setup.py'), PosixPath('test_pathlib.py')]\nsorted(Path('.').glob('*/*.py'))\n[PosixPath('docs/conf.py')]\n\n", "sorted(Path('.').glob('**/*.py'))\n[PosixPath('build/lib/pathlib.py'),\n PosixPath('docs/conf.py'),\n PosixPath('pathlib.py'),\n PosixPath('setup.py'),\n PosixPath('test_pathlib.py')]\n\n"]},
{"title": "14.2.7. Customizing Parser Behaviour: configparser.SECTCRE", "url": "http://localhost:8000/library/configparser.html#configparser.SECTCRE", "code_snippets": ["config = \"\"\"\n[Section 1]\noption = value\n\n[  Section 2  ]\nanother = val\n\"\"\"\ntypical = ConfigParser()\ntypical.read_string(config)\ntypical.sections()\n['Section 1', '  Section 2  ']\ncustom = ConfigParser()\ncustom.SECTCRE = re.compile(r\"\\[ *(?P<header>[^]]+?) *\\]\")\ncustom.read_string(config)\ncustom.sections()\n['Section 1', 'Section 2']\n\n"]},
{"title": "14.1.1. Module Contents: csv.DictWriter", "url": "http://localhost:8000/library/csv.html#csv.DictWriter", "code_snippets": ["import csv\n\nwith open('names.csv', 'w') as csvfile:\n    fieldnames = ['first_name', 'last_name']\n    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n\n    writer.writeheader()\n    writer.writerow({'first_name': 'Baked', 'last_name': 'Beans'})\n    writer.writerow({'first_name': 'Lovely', 'last_name': 'Spam'})\n    writer.writerow({'first_name': 'Wonderful', 'last_name': 'Spam'})\n\n"]},
{"title": "11.1.3.1. Methods: pathlib.Path.iterdir", "url": "http://localhost:8000/library/pathlib.html#pathlib.Path.iterdir", "code_snippets": ["p = Path('docs')\nfor child in p.iterdir(): child\n\nPosixPath('docs/conf.py')\nPosixPath('docs/_templates')\nPosixPath('docs/make.bat')\nPosixPath('docs/index.rst')\nPosixPath('docs/_build')\nPosixPath('docs/_static')\nPosixPath('docs/Makefile')\n\n"]},
{"title": "11.1.3.1. Methods: pathlib.Path.open", "url": "http://localhost:8000/library/pathlib.html#pathlib.Path.open", "code_snippets": ["p = Path('setup.py')\nwith p.open() as f:\n    f.readline()\n\n'#!/usr/bin/env python3\\n'\n\n"]},
{"title": "11.1.3.1. Methods: pathlib.Path.read_bytes", "url": "http://localhost:8000/library/pathlib.html#pathlib.Path.read_bytes", "code_snippets": ["p = Path('my_binary_file')\np.write_bytes(b'Binary file contents')\n20\np.read_bytes()\nb'Binary file contents'\n\n"]},
{"title": "11.1.3.1. Methods: pathlib.Path.read_text", "url": "http://localhost:8000/library/pathlib.html#pathlib.Path.read_text", "code_snippets": ["p = Path('my_text_file')\np.write_text('Text file contents')\n18\np.read_text()\n'Text file contents'\n\n"]},
{"title": "15.1.3. Key derivation: hashlib.pbkdf2_hmac", "url": "http://localhost:8000/library/hashlib.html#hashlib.pbkdf2_hmac", "code_snippets": ["import hashlib, binascii\ndk = hashlib.pbkdf2_hmac('sha256', b'password', b'salt', 100000)\nbinascii.hexlify(dk)\nb'0394a2ede332c9a13eb82e9b24631604c31df978b4e2f0fbd2c549944f9d79a5'\n\n"]},
{"title": "12.6.1. Module functions and constants: sqlite3.connect", "url": "http://localhost:8000/library/sqlite3.html#sqlite3.connect", "code_snippets": ["db = sqlite3.connect('file:path/to/database?mode=ro', uri=True)\n\n"]},
{"title": "11.1.3.1. Methods: pathlib.Path.rename", "url": "http://localhost:8000/library/pathlib.html#pathlib.Path.rename", "code_snippets": ["p = Path('foo')\np.open('w').write('some text')\n9\ntarget = Path('bar')\np.rename(target)\ntarget.open().read()\n'some text'\n\n"]},
{"title": "11.1.3.1. Methods: pathlib.Path.resolve", "url": "http://localhost:8000/library/pathlib.html#pathlib.Path.resolve", "code_snippets": ["p = Path()\np\nPosixPath('.')\np.resolve()\nPosixPath('/home/antoine/pathlib')\n\n", "p = Path('docs/../setup.py')\np.resolve()\nPosixPath('/home/antoine/pathlib/setup.py')\n\n"]},
{"title": "12.6.1. Module functions and constants: sqlite3.complete_statement", "url": "http://localhost:8000/library/sqlite3.html#sqlite3.complete_statement", "code_snippets": ["# A minimal SQLite shell for experiments\n\nimport sqlite3\n\ncon = sqlite3.connect(\":memory:\")\ncon.isolation_level = None\ncur = con.cursor()\n\nbuffer = \"\"\n\nprint(\"Enter your SQL commands to execute in sqlite3.\")\nprint(\"Enter a blank line to exit.\")\n\nwhile True:\n    line = input()\n    if line == \"\":\n        break\n    buffer += line\n    if sqlite3.complete_statement(buffer):\n        try:\n            buffer = buffer.strip()\n            cur.execute(buffer)\n\n            if buffer.lstrip().upper().startswith(\"SELECT\"):\n                print(cur.fetchall())\n        except sqlite3.Error as e:\n            print(\"An error occurred:\", e.args[0])\n        buffer = \"\"\n\ncon.close()\n\n"]},
{"title": "11.1.3.1. Methods: pathlib.Path.rglob", "url": "http://localhost:8000/library/pathlib.html#pathlib.Path.rglob", "code_snippets": ["sorted(Path().rglob(\"*.py\"))\n[PosixPath('build/lib/pathlib.py'),\n PosixPath('docs/conf.py'),\n PosixPath('pathlib.py'),\n PosixPath('setup.py'),\n PosixPath('test_pathlib.py')]\n\n"]},
{"title": "11.1.3.1. Methods: pathlib.Path.samefile", "url": "http://localhost:8000/library/pathlib.html#pathlib.Path.samefile", "code_snippets": ["p = Path('spam')\nq = Path('eggs')\np.samefile(q)\nFalse\np.samefile('spam')\nTrue\n\n"]},
{"title": "11.1.3.1. Methods: pathlib.Path.symlink_to", "url": "http://localhost:8000/library/pathlib.html#pathlib.Path.symlink_to", "code_snippets": ["p = Path('mylink')\np.symlink_to('setup.py')\np.resolve()\nPosixPath('/home/antoine/pathlib/setup.py')\np.stat().st_size\n956\np.lstat().st_size\n8\n\n"]},
{"title": "13.5.1. ZipFile Objects: zipfile.ZipFile", "url": "http://localhost:8000/library/zipfile.html#zipfile.ZipFile", "code_snippets": ["with ZipFile('spam.zip', 'w') as myzip:\n    myzip.write('eggs.txt')\n\n"]},
{"title": "11.1.3.1. Methods: pathlib.Path.write_bytes", "url": "http://localhost:8000/library/pathlib.html#pathlib.Path.write_bytes", "code_snippets": ["p = Path('my_binary_file')\np.write_bytes(b'Binary file contents')\n20\np.read_bytes()\nb'Binary file contents'\n\n"]},
{"title": "11.1.3.1. Methods: pathlib.Path.write_text", "url": "http://localhost:8000/library/pathlib.html#pathlib.Path.write_text", "code_snippets": ["p = Path('my_text_file')\np.write_text('Text file contents')\n18\np.read_text()\n'Text file contents'\n\n"]},
{"title": "13.5.1. ZipFile Objects: zipfile.ZipFile.open", "url": "http://localhost:8000/library/zipfile.html#zipfile.ZipFile.open", "code_snippets": ["with ZipFile('spam.zip') as myzip:\n    with myzip.open('eggs.txt') as myfile:\n        print(myfile.read())\n\n"]},
{"title": "11.1.3. Concrete paths: pathlib.Path", "url": "http://localhost:8000/library/pathlib.html#pathlib.Path", "code_snippets": ["Path('setup.py')\nPosixPath('setup.py')\n\n"]},
{"title": "11.1.3. Concrete paths: pathlib.PosixPath", "url": "http://localhost:8000/library/pathlib.html#pathlib.PosixPath", "code_snippets": ["PosixPath('/etc')\nPosixPath('/etc')\n\n"]},
{"title": "11.1.3. Concrete paths: pathlib.WindowsPath", "url": "http://localhost:8000/library/pathlib.html#pathlib.WindowsPath", "code_snippets": ["WindowsPath('c:/Program Files/')\nWindowsPath('c:/Program Files')\n\n"]},
{"title": "5.1.1. Using Lists as Stacks", "url": "http://localhost:8000/tutorial/datastructures.html#using-lists-as-stacks", "code_snippets": ["stack = [3, 4, 5]\nstack.append(6)\nstack.append(7)\nstack\n[3, 4, 5, 6, 7]\nstack.pop()\n7\nstack\n[3, 4, 5, 6]\nstack.pop()\n6\nstack.pop()\n5\nstack\n[3, 4]\n\n"]},
{"title": "5.1.2. Using Lists as Queues", "url": "http://localhost:8000/tutorial/datastructures.html#using-lists-as-queues", "code_snippets": ["from collections import deque\nqueue = deque([\"Eric\", \"John\", \"Michael\"])\nqueue.append(\"Terry\")           # Terry arrives\nqueue.append(\"Graham\")          # Graham arrives\nqueue.popleft()                 # The first to arrive now leaves\n'Eric'\nqueue.popleft()                 # The second to arrive now leaves\n'John'\nqueue                           # Remaining queue in order of arrival\ndeque(['Michael', 'Terry', 'Graham'])\n\n"]},
{"title": "5.1.3. List Comprehensions", "url": "http://localhost:8000/tutorial/datastructures.html#list-comprehensions", "code_snippets": ["squares = []\nfor x in range(10):\n    squares.append(x**2)\n\nsquares\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\n", "squares = list(map(lambda x: x**2, range(10)))\n\n", "squares = [x**2 for x in range(10)]\n\n", "[(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]\n[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\n\n", "combs = []\nfor x in [1,2,3]:\n    for y in [3,1,4]:\n        if x != y:\n            combs.append((x, y))\n\ncombs\n[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\n\n", "from math import pi\n[str(round(pi, i)) for i in range(1, 6)]\n['3.1', '3.14', '3.142', '3.1416', '3.14159']\n\n"]},
{"title": "3.1.1. Numbers", "url": "http://localhost:8000/tutorial/introduction.html#numbers", "code_snippets": ["2 + 2\n4\n50 - 5*6\n20\n(50 - 5*6) / 4\n5.0\n8 / 5  # division always returns a floating point number\n1.6\n\n", "17 / 3  # classic division returns a float\n5.666666666666667\n\n17 // 3  # floor division discards the fractional part\n5\n17 % 3  # the % operator returns the remainder of the division\n2\n5 * 3 + 2  # result * divisor + remainder\n17\n\n", "5 ** 2  # 5 squared\n25\n2 ** 7  # 2 to the power of 7\n128\n\n", "width = 20\nheight = 5 * 9\nwidth * height\n900\n\n", "3 * 3.75 / 1.5\n7.5\n7.0 / 2\n3.5\n\n", "tax = 12.5 / 100\nprice = 100.50\nprice * tax\n12.5625\nprice + _\n113.0625\nround(_, 2)\n113.06\n\n"]},
{"title": "15.1. Representation Error", "url": "http://localhost:8000/tutorial/floatingpoint.html#representation-error", "code_snippets": ["2**52 <=  2**56 // 10  < 2**53\nTrue\n\n", "q, r = divmod(2**56, 10)\nr\n6\n\n", "q+1\n7205759403792794\n\n", "7205759403792794 / 2 ** 56\n\n", "3602879701896397 / 2 ** 55\n\n", "0.1 * 2 ** 55\n3602879701896397.0\n\n", "3602879701896397 * 10 ** 55 // 2 ** 55\n1000000000000000055511151231257827021181583404541015625\n\n", "format(0.1, '.17f')\n'0.10000000000000001'\n\n", "from decimal import Decimal\nfrom fractions import Fraction\n\nFraction.from_float(0.1)\nFraction(3602879701896397, 36028797018963968)\n\n(0.1).as_integer_ratio()\n(3602879701896397, 36028797018963968)\n\nDecimal.from_float(0.1)\nDecimal('0.1000000000000000055511151231257827021181583404541015625')\n\nformat(Decimal.from_float(0.1), '.17')\n'0.10000000000000001'\n\n"]},
{"title": "5.1.4. Nested List Comprehensions", "url": "http://localhost:8000/tutorial/datastructures.html#nested-list-comprehensions", "code_snippets": ["matrix = [\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12],\n]\n\n", "[[row[i] for row in matrix] for i in range(4)]\n[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]\n\n", "transposed = []\nfor i in range(4):\n    transposed.append([row[i] for row in matrix])\n\ntransposed\n[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]\n\n", "transposed = []\nfor i in range(4):\n    # the following 3 lines implement the nested listcomp\n    transposed_row = []\n    for row in matrix:\n        transposed_row.append(row[i])\n    transposed.append(transposed_row)\n\ntransposed\n[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]\n\n", "list(zip(*matrix))\n[(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]\n\n"]},
{"title": "4.2. ", "url": "http://localhost:8000/tutorial/controlflow.html#for-statements", "code_snippets": ["for w in words[:]:  # Loop over a slice copy of the entire list.\n    if len(w) > 6:\n        words.insert(0, w)\n\nwords\n['defenestrate', 'cat', 'window', 'defenestrate']\n\n"]},
{"title": "4.3. The ", "url": "http://localhost:8000/tutorial/controlflow.html#the-range-function", "code_snippets": ["for i in range(5):\n    print(i)\n\n0\n1\n2\n3\n4\n\n", "print(range(10))\nrange(0, 10)\n\n", "list(range(5))\n[0, 1, 2, 3, 4]\n\n"]},
{"title": "3.1.2. Strings", "url": "http://localhost:8000/tutorial/introduction.html#strings", "code_snippets": ["'spam eggs'  # single quotes\n'spam eggs'\n'doesn\\'t'  # use \\' to escape the single quote...\n\"doesn't\"\n\"doesn't\"  # ...or use double quotes instead\n\"doesn't\"\n'\"Yes,\" he said.'\n'\"Yes,\" he said.'\n\"\\\"Yes,\\\" he said.\"\n'\"Yes,\" he said.'\n'\"Isn\\'t,\" she said.'\n'\"Isn\\'t,\" she said.'\n\n", "print(\"\"\"\\\nUsage: thingy [OPTIONS]\n     -h                        Display this usage message\n     -H hostname               Hostname to connect to\n\"\"\")\n\n", "# 3 times 'un', followed by 'ium'\n3 * 'un' + 'ium'\n'unununium'\n\n", "'Py' 'thon'\n'Python'\n\n", "prefix + 'thon'\n'Python'\n\n", "text = ('Put several strings within parentheses '\n        'to have them joined together.')\ntext\n'Put several strings within parentheses to have them joined together.'\n\n", "word = 'Python'\nword[0]  # character in position 0\n'P'\nword[5]  # character in position 5\n'n'\n\n", "word[-1]  # last character\n'n'\nword[-2]  # second-last character\n'o'\nword[-6]\n'P'\n\n", "word[0:2]  # characters from position 0 (included) to 2 (excluded)\n'Py'\nword[2:5]  # characters from position 2 (included) to 5 (excluded)\n'tho'\n\n", "word[:2] + word[2:]\n'Python'\nword[:4] + word[4:]\n'Python'\n\n", "word[:2]   # character from the beginning to position 2 (excluded)\n'Py'\nword[4:]   # characters from position 4 (included) to the end\n'on'\nword[-2:]  # characters from the second-last (included) to the end\n'on'\n\n", "word[4:42]\n'on'\nword[42:]\n''\n\n", "'J' + word[1:]\n'Jython'\nword[:2] + 'py'\n'Pypy'\n\n", "s = 'supercalifragilisticexpialidocious'\nlen(s)\n34\n\n"]},
{"title": "16.1.3. The Interactive Startup File", "url": "http://localhost:8000/tutorial/appendix.html#the-interactive-startup-file", "code_snippets": ["import os\nfilename = os.environ.get('PYTHONSTARTUP')\nif filename and os.path.isfile(filename):\n    with open(filename) as fobj:\n        startup_file = fobj.read()\n    exec(startup_file)\n\n"]},
{"title": "16.1.4. The Customization Modules", "url": "http://localhost:8000/tutorial/appendix.html#the-customization-modules", "code_snippets": ["import site\nsite.getusersitepackages()\n'/home/user/.local/lib/python3.5/site-packages'\n\n"]},
{"title": "15. Floating Point Arithmetic:  Issues and Limitations", "url": "http://localhost:8000/tutorial/floatingpoint.html#floating-point-arithmetic-issues-and-limitations", "code_snippets": ["0.125\n\n", "0.001\n\n", "0.3\n\n", "0.33\n\n", "0.333\n\n", "0.0001100110011001100110011001100110011001100110011\n\n", "0.1\n0.1000000000000000055511151231257827021181583404541015625\n\n", "1 / 10\n0.1\n\n", "format(math.pi, '.12g')  # give 12 significant digits\n'3.14159265359'\n\nformat(math.pi, '.2f')   # give 2 digits after the point\n'3.14'\n\nrepr(math.pi)\n'3.141592653589793'\n\n", ".1 + .1 + .1 == .3\nFalse\n\n", "round(.1, 1) + round(.1, 1) + round(.1, 1) == round(.3, 1)\nFalse\n\n", "round(.1 + .1 + .1, 10) == round(.3, 10)\nTrue\n\n", "x = 3.14159\nx.as_integer_ratio()\n(3537115888337719, 1125899906842624)\n\n", "x == 3537115888337719 / 1125899906842624\nTrue\n\n", "x.hex()\n'0x1.921f9f01b866ep+1'\n\n", "x == float.fromhex('0x1.921f9f01b866ep+1')\nTrue\n\n", "sum([0.1] * 10) == 1.0\nFalse\nmath.fsum([0.1] * 10) == 1.0\nTrue\n\n"]},
{"title": "5.1. More on Lists", "url": "http://localhost:8000/tutorial/datastructures.html#more-on-lists", "code_snippets": ["fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana']\nfruits.count('apple')\n2\nfruits.count('tangerine')\n0\nfruits.index('banana')\n3\nfruits.index('banana', 4)  # Find next banana starting a position 4\n6\nfruits.reverse()\nfruits\n['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange']\nfruits.append('grape')\nfruits\n['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange', 'grape']\nfruits.sort()\nfruits\n['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear']\nfruits.pop()\n'pear'\n\n"]},
{"title": "5.2. The ", "url": "http://localhost:8000/tutorial/datastructures.html#the-del-statement", "code_snippets": ["a = [-1, 1, 66.25, 333, 333, 1234.5]\ndel a[0]\na\n[1, 66.25, 333, 333, 1234.5]\ndel a[2:4]\na\n[1, 66.25, 1234.5]\ndel a[:]\na\n[]\n\n", "del a\n\n"]},
{"title": "11.1. Output Formatting", "url": "http://localhost:8000/tutorial/stdlib2.html#output-formatting", "code_snippets": ["import reprlib\nreprlib.repr(set('supercalifragilisticexpialidocious'))\n\"{'a', 'c', 'd', 'e', 'f', 'g', ...}\"\n\n", "import pprint\nt = [[[['black', 'cyan'], 'white', ['green', 'red']], [['magenta',\n    'yellow'], 'blue']]]\n\npprint.pprint(t, width=30)\n[[[['black', 'cyan'],\n   'white',\n   ['green', 'red']],\n  [['magenta', 'yellow'],\n   'blue']]]\n\n", "import locale\nlocale.setlocale(locale.LC_ALL, 'English_United States.1252')\n'English_United States.1252'\nconv = locale.localeconv()          # get a mapping of conventions\nx = 1234567.8\nlocale.format(\"%d\", x, grouping=True)\n'1,234,567'\nlocale.format_string(\"%s%.*f\", (conv['currency_symbol'],\n                     conv['frac_digits'], x), grouping=True)\n'$1,234,567.80'\n\n"]},
{"title": "10.1. Operating System Interface", "url": "http://localhost:8000/tutorial/stdlib.html#operating-system-interface", "code_snippets": ["import os\nos.getcwd()      # Return the current working directory\n'C:\\\\Python36'\nos.chdir('/server/accesslogs')   # Change current working directory\nos.system('mkdir today')   # Run the command mkdir in the system shell\n0\n\n", "import shutil\nshutil.copyfile('data.db', 'archive.db')\n'archive.db'\nshutil.move('/build/executables', 'installdir')\n'installdir'\n\n"]},
{"title": "6.1.1. Executing modules as scripts", "url": "http://localhost:8000/tutorial/modules.html#executing-modules-as-scripts", "code_snippets": ["if __name__ == \"__main__\":\n    import sys\n    fib(int(sys.argv[1]))\n\n", "import fibo\n\n\n"]},
{"title": "3.1.3. Lists", "url": "http://localhost:8000/tutorial/introduction.html#lists", "code_snippets": ["squares = [1, 4, 9, 16, 25]\nsquares\n[1, 4, 9, 16, 25]\n\n", "squares[0]  # indexing returns the item\n1\nsquares[-1]\n25\nsquares[-3:]  # slicing returns a new list\n[9, 16, 25]\n\n", "squares[:]\n[1, 4, 9, 16, 25]\n\n", "squares + [36, 49, 64, 81, 100]\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\n", "cubes = [1, 8, 27, 65, 125]  # something's wrong here\n4 ** 3  # the cube of 4 is 64, not 65!\n64\ncubes[3] = 64  # replace the wrong value\ncubes\n[1, 8, 27, 64, 125]\n\n", "cubes.append(216)  # add the cube of 6\ncubes.append(7 ** 3)  # and the cube of 7\ncubes\n[1, 8, 27, 64, 125, 216, 343]\n\n", "letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\nletters\n['a', 'b', 'c', 'd', 'e', 'f', 'g']\n# replace some values\nletters[2:5] = ['C', 'D', 'E']\nletters\n['a', 'b', 'C', 'D', 'E', 'f', 'g']\n# now remove them\nletters[2:5] = []\nletters\n['a', 'b', 'f', 'g']\n# clear the list by replacing all the elements with an empty list\nletters[:] = []\nletters\n[]\n\n", "letters = ['a', 'b', 'c', 'd']\nlen(letters)\n4\n\n", "a = ['a', 'b', 'c']\nn = [1, 2, 3]\nx = [a, n]\nx\n[['a', 'b', 'c'], [1, 2, 3]]\nx[0]\n['a', 'b', 'c']\nx[0][1]\n'b'\n\n"]},
{"title": "5.3. Tuples and Sequences", "url": "http://localhost:8000/tutorial/datastructures.html#tuples-and-sequences", "code_snippets": ["empty = ()\nsingleton = 'hello',    # <-- note trailing comma\nlen(empty)\n0\nlen(singleton)\n1\nsingleton\n('hello',)\n\n", "x, y, z = t\n\n"]},
{"title": "11.2. Templating", "url": "http://localhost:8000/tutorial/stdlib2.html#templating", "code_snippets": ["from string import Template\nt = Template('${village}folk send $$10 to $cause.')\nt.substitute(village='Nottingham', cause='the ditch fund')\n'Nottinghamfolk send $10 to the ditch fund.'\n\n"]},
{"title": "10.2. File Wildcards", "url": "http://localhost:8000/tutorial/stdlib.html#file-wildcards", "code_snippets": ["import glob\nglob.glob('*.py')\n['primes.py', 'random.py', 'quote.py']\n\n"]},
{"title": "10.3. Command Line Arguments", "url": "http://localhost:8000/tutorial/stdlib.html#command-line-arguments", "code_snippets": ["import sys\nprint(sys.argv)\n['demo.py', 'one', 'two', 'three']\n\n"]},
{"title": "10.5. String Pattern Matching", "url": "http://localhost:8000/tutorial/stdlib.html#string-pattern-matching", "code_snippets": ["import re\nre.findall(r'\\bf[a-z]*', 'which foot or hand fell fastest')\n['foot', 'fell', 'fastest']\nre.sub(r'(\\b[a-z]+) \\1', r'\\1', 'cat in the the hat')\n'cat in the hat'\n\n", "'tea for too'.replace('too', 'two')\n'tea for two'\n\n"]},
{"title": "8.3. Handling Exceptions", "url": "http://localhost:8000/tutorial/errors.html#handling-exceptions", "code_snippets": ["while True:\n    try:\n        x = int(input(\"Please enter a number: \"))\n        break\n    except ValueError:\n        print(\"Oops!  That was no valid number.  Try again...\")\n\n\n", "class B(Exception):\n    pass\n\nclass C(B):\n    pass\n\nclass D(C):\n    pass\n\nfor cls in [B, C, D]:\n    try:\n        raise cls()\n    except D:\n        print(\"D\")\n    except C:\n        print(\"C\")\n    except B:\n        print(\"B\")\n\n", "import sys\n\ntry:\n    f = open('myfile.txt')\n    s = f.readline()\n    i = int(s.strip())\nexcept OSError as err:\n    print(\"OS error: {0}\".format(err))\nexcept ValueError:\n    print(\"Could not convert data to an integer.\")\nexcept:\n    print(\"Unexpected error:\", sys.exc_info()[0])\n    raise\n\n", "for arg in sys.argv[1:]:\n    try:\n        f = open(arg, 'r')\n    except OSError:\n        print('cannot open', arg)\n    else:\n        print(arg, 'has', len(f.readlines()), 'lines')\n        f.close()\n\n"]},
{"title": "7.1. Fancier Output Formatting", "url": "http://localhost:8000/tutorial/inputoutput.html#fancier-output-formatting", "code_snippets": ["'12'.zfill(5)\n'00012'\n'-3.14'.zfill(7)\n'-003.14'\n'3.14159265359'.zfill(5)\n'3.14159265359'\n\n", "print('{0} and {1}'.format('spam', 'eggs'))\nspam and eggs\nprint('{1} and {0}'.format('spam', 'eggs'))\neggs and spam\n\n"]},
{"title": "9.2.1. Scopes and Namespaces Example", "url": "http://localhost:8000/tutorial/classes.html#scopes-and-namespaces-example", "code_snippets": ["def scope_test():\n    def do_local():\n        spam = \"local spam\"\n\n    def do_nonlocal():\n        nonlocal spam\n        spam = \"nonlocal spam\"\n\n    def do_global():\n        global spam\n        spam = \"global spam\"\n\n    spam = \"test spam\"\n    do_local()\n    print(\"After local assignment:\", spam)\n    do_nonlocal()\n    print(\"After nonlocal assignment:\", spam)\n    do_global()\n    print(\"After global assignment:\", spam)\n\nscope_test()\nprint(\"In global scope:\", spam)\n\n"]},
{"title": "6.2. Standard Modules", "url": "http://localhost:8000/tutorial/modules.html#standard-modules", "code_snippets": ["import sys\nsys.path.append('/ufs/guido/lib/python')\n\n"]},
{"title": "4.5. ", "url": "http://localhost:8000/tutorial/controlflow.html#pass-statements", "code_snippets": ["while True:\n    pass  # Busy-wait for keyboard interrupt (Ctrl+C)\n\n\n", "class MyEmptyClass:\n    pass\n\n\n", "def initlog(*args):\n    pass   # Remember to implement this!\n\n\n"]},
{"title": "4.6. Defining Functions", "url": "http://localhost:8000/tutorial/controlflow.html#defining-functions", "code_snippets": ["fib(0)\nprint(fib(0))\nNone\n\n", "def fib2(n):  # return Fibonacci series up to n\n    \"\"\"Return a list containing the Fibonacci series up to n.\"\"\"\n    result = []\n    a, b = 0, 1\n    while a < n:\n        result.append(a)    # see below\n        a, b = b, a+b\n    return result\n\nf100 = fib2(100)    # call it\nf100                # write the result\n[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n\n"]},
{"title": "3.2. First Steps Towards Programming", "url": "http://localhost:8000/tutorial/introduction.html#first-steps-towards-programming", "code_snippets": ["# Fibonacci series:\n# the sum of two elements defines the next\na, b = 0, 1\nwhile b < 10:\n    print(b)\n    a, b = b, a+b\n\n1\n1\n2\n3\n5\n8\n\n"]},
{"title": "3. An Informal Introduction to Python", "url": "http://localhost:8000/tutorial/introduction.html#an-informal-introduction-to-python", "code_snippets": ["# this is the first comment\nspam = 1  # and this is the second comment\n          # ... and now a third!\ntext = \"# This is not a comment because it's inside quotes.\"\n\n"]},
{"title": "5.4. Sets", "url": "http://localhost:8000/tutorial/datastructures.html#sets", "code_snippets": ["basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}\nprint(basket)                      # show that duplicates have been removed\n{'orange', 'banana', 'pear', 'apple'}\n'orange' in basket                 # fast membership testing\nTrue\n'crabgrass' in basket\nFalse\n\n# Demonstrate set operations on unique letters from two words\n\na = set('abracadabra')\nb = set('alacazam')\na                                  # unique letters in a\n{'a', 'r', 'b', 'c', 'd'}\na - b                              # letters in a but not in b\n{'r', 'd', 'b'}\na | b                              # letters in either a or b\n{'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'}\na & b                              # letters in both a and b\n{'a', 'c'}\na ^ b                              # letters in a or b but not both\n{'r', 'd', 'b', 'm', 'z', 'l'}\n\n", "a = {x for x in 'abracadabra' if x not in 'abc'}\na\n{'r', 'd'}\n\n"]},
{"title": "11.3. Working with Binary Data Record Layouts", "url": "http://localhost:8000/tutorial/stdlib2.html#working-with-binary-data-record-layouts", "code_snippets": ["import struct\n\nwith open('myfile.zip', 'rb') as f:\n    data = f.read()\n\nstart = 0\nfor i in range(3):                      # show the first 3 file headers\n    start += 14\n    fields = struct.unpack('<IIIHH', data[start:start+16])\n    crc32, comp_size, uncomp_size, filenamesize, extra_size = fields\n\n    start += 16\n    filename = data[start:start+filenamesize]\n    start += filenamesize\n    extra = data[start:start+extra_size]\n    print(filename, hex(crc32), comp_size, uncomp_size)\n\n    start += extra_size + comp_size     # skip to the next header\n\n"]},
{"title": "10.6. Mathematics", "url": "http://localhost:8000/tutorial/stdlib.html#mathematics", "code_snippets": ["import math\nmath.cos(math.pi / 4)\n0.70710678118654757\nmath.log(1024, 2)\n10.0\n\n", "import random\nrandom.choice(['apple', 'pear', 'banana'])\n'apple'\nrandom.sample(range(100), 10)   # sampling without replacement\n[30, 83, 16, 4, 8, 81, 41, 50, 18, 33]\nrandom.random()    # random float\n0.17970987693706186\nrandom.randrange(6)    # random integer chosen from range(6)\n4\n\n", "import statistics\ndata = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]\nstatistics.mean(data)\n1.6071428571428572\nstatistics.median(data)\n1.25\nstatistics.variance(data)\n1.3720238095238095\n\n"]},
{"title": "8.4. Raising Exceptions", "url": "http://localhost:8000/tutorial/errors.html#raising-exceptions", "code_snippets": ["raise ValueError  # shorthand for 'raise ValueError()'\n\n"]},
{"title": "8.5. User-defined Exceptions", "url": "http://localhost:8000/tutorial/errors.html#user-defined-exceptions", "code_snippets": ["class Error(Exception):\n    \"\"\"Base class for exceptions in this module.\"\"\"\n    pass\n\nclass InputError(Error):\n    \"\"\"Exception raised for errors in the input.\n\n    Attributes:\n        expression -- input expression in which the error occurred\n        message -- explanation of the error\n    \"\"\"\n\n    def __init__(self, expression, message):\n        self.expression = expression\n        self.message = message\n\nclass TransitionError(Error):\n    \"\"\"Raised when an operation attempts a state transition that's not\n    allowed.\n\n    Attributes:\n        previous -- state at beginning of transition\n        next -- attempted new state\n        message -- explanation of why the specific transition is not allowed\n    \"\"\"\n\n    def __init__(self, previous, next, message):\n        self.previous = previous\n        self.next = next\n        self.message = message\n\n"]},
{"title": "7.2.1. Methods of File Objects", "url": "http://localhost:8000/tutorial/inputoutput.html#methods-of-file-objects", "code_snippets": ["f.read()\n'This is the entire file.\\n'\nf.read()\n''\n\n", "f.readline()\n'This is the first line of the file.\\n'\nf.readline()\n'Second line of the file\\n'\nf.readline()\n''\n\n", "f.write('This is a test\\n')\n15\n\n", "value = ('the answer', 42)\ns = str(value)  # convert the tuple to string\nf.write(s)\n18\n\n", "f = open('workfile', 'rb+')\nf.write(b'0123456789abcdef')\n16\nf.seek(5)      # Go to the 6th byte in the file\n5\nf.read(1)\nb'5'\nf.seek(-3, 2)  # Go to the 3rd byte before the end\n13\nf.read(1)\nb'd'\n\n", "with open('workfile', 'r') as f:\n    read_data = f.read()\nf.closed\nTrue\n\n"]},
{"title": "9.3.2. Class Objects", "url": "http://localhost:8000/tutorial/classes.html#class-objects", "code_snippets": ["class MyClass:\n    \"\"\"A simple example class\"\"\"\n    i = 12345\n\n    def f(self):\n        return 'hello world'\n\n", "x = MyClass()\n\n", "def __init__(self):\n    self.data = []\n\n", "x = MyClass()\n\n", "class Complex:\n    def __init__(self, realpart, imagpart):\n        self.r = realpart\n        self.i = imagpart\n\nx = Complex(3.0, -4.5)\nx.r, x.i\n(3.0, -4.5)\n\n"]},
{"title": "6.3. The ", "url": "http://localhost:8000/tutorial/modules.html#the-dir-function", "code_snippets": ["import fibo, sys\ndir(fibo)\n['__name__', 'fib', 'fib2']\ndir(sys)  \n['__displayhook__', '__doc__', '__excepthook__', '__loader__', '__name__',\n '__package__', '__stderr__', '__stdin__', '__stdout__',\n '_clear_type_cache', '_current_frames', '_debugmallocstats', '_getframe',\n '_home', '_mercurial', '_xoptions', 'abiflags', 'api_version', 'argv',\n 'base_exec_prefix', 'base_prefix', 'builtin_module_names', 'byteorder',\n 'call_tracing', 'callstats', 'copyright', 'displayhook',\n 'dont_write_bytecode', 'exc_info', 'excepthook', 'exec_prefix',\n 'executable', 'exit', 'flags', 'float_info', 'float_repr_style',\n 'getcheckinterval', 'getdefaultencoding', 'getdlopenflags',\n 'getfilesystemencoding', 'getobjects', 'getprofile', 'getrecursionlimit',\n 'getrefcount', 'getsizeof', 'getswitchinterval', 'gettotalrefcount',\n 'gettrace', 'hash_info', 'hexversion', 'implementation', 'int_info',\n 'intern', 'maxsize', 'maxunicode', 'meta_path', 'modules', 'path',\n 'path_hooks', 'path_importer_cache', 'platform', 'prefix', 'ps1',\n 'setcheckinterval', 'setdlopenflags', 'setprofile', 'setrecursionlimit',\n 'setswitchinterval', 'settrace', 'stderr', 'stdin', 'stdout',\n 'thread_info', 'version', 'version_info', 'warnoptions']\n\n", "a = [1, 2, 3, 4, 5]\nimport fibo\nfib = fibo.fib\ndir()\n['__builtins__', '__name__', 'a', 'fib', 'fibo', 'sys']\n\n", "import builtins\ndir(builtins)  \n['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException',\n 'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning',\n 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError',\n 'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning',\n 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False',\n 'FileExistsError', 'FileNotFoundError', 'FloatingPointError',\n 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError',\n 'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError',\n 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError',\n 'MemoryError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented',\n 'NotImplementedError', 'OSError', 'OverflowError',\n 'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError',\n 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning',\n 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError',\n 'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError',\n 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError',\n 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning',\n 'ValueError', 'Warning', 'ZeroDivisionError', '_', '__build_class__',\n '__debug__', '__doc__', '__import__', '__name__', '__package__', 'abs',\n 'all', 'any', 'ascii', 'bin', 'bool', 'bytearray', 'bytes', 'callable',\n 'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits',\n 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit',\n 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr',\n 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass',\n 'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview',\n 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property',\n 'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice',\n 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars',\n 'zip']\n\n"]},
{"title": "4.7.1. Default Argument Values", "url": "http://localhost:8000/tutorial/controlflow.html#default-argument-values", "code_snippets": ["def ask_ok(prompt, retries=4, reminder='Please try again!'):\n    while True:\n        ok = input(prompt)\n        if ok in ('y', 'ye', 'yes'):\n            return True\n        if ok in ('n', 'no', 'nop', 'nope'):\n            return False\n        retries = retries - 1\n        if retries < 0:\n            raise ValueError('invalid user response')\n        print(reminder)\n\n", "i = 5\n\ndef f(arg=i):\n    print(arg)\n\ni = 6\nf()\n\n", "def f(a, L=[]):\n    L.append(a)\n    return L\n\nprint(f(1))\nprint(f(2))\nprint(f(3))\n\n", "[1]\n[1, 2]\n[1, 2, 3]\n\n", "def f(a, L=None):\n    if L is None:\n        L = []\n    L.append(a)\n    return L\n\n"]},
{"title": "5.5. Dictionaries", "url": "http://localhost:8000/tutorial/datastructures.html#dictionaries", "code_snippets": ["tel = {'jack': 4098, 'sape': 4139}\ntel['guido'] = 4127\ntel\n{'sape': 4139, 'guido': 4127, 'jack': 4098}\ntel['jack']\n4098\ndel tel['sape']\ntel['irv'] = 4127\ntel\n{'guido': 4127, 'irv': 4127, 'jack': 4098}\nlist(tel.keys())\n['irv', 'guido', 'jack']\nsorted(tel.keys())\n['guido', 'irv', 'jack']\n'guido' in tel\nTrue\n'jack' not in tel\nFalse\n\n", "dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])\n{'sape': 4139, 'jack': 4098, 'guido': 4127}\n\n", "{x: x**2 for x in (2, 4, 6)}\n{2: 4, 4: 16, 6: 36}\n\n", "dict(sape=4139, guido=4127, jack=4098)\n{'sape': 4139, 'jack': 4098, 'guido': 4127}\n\n"]},
{"title": "11.4. Multi-threading", "url": "http://localhost:8000/tutorial/stdlib2.html#multi-threading", "code_snippets": ["import threading, zipfile\n\nclass AsyncZip(threading.Thread):\n    def __init__(self, infile, outfile):\n        threading.Thread.__init__(self)\n        self.infile = infile\n        self.outfile = outfile\n\n    def run(self):\n        f = zipfile.ZipFile(self.outfile, 'w', zipfile.ZIP_DEFLATED)\n        f.write(self.infile)\n        f.close()\n        print('Finished background zip of:', self.infile)\n\nbackground = AsyncZip('mydata.txt', 'myarchive.zip')\nbackground.start()\nprint('The main program continues to run in foreground.')\n\nbackground.join()    # Wait for the background task to finish\nprint('Main program waited until background was done.')\n\n"]},
{"title": "10.8. Dates and Times", "url": "http://localhost:8000/tutorial/stdlib.html#dates-and-times", "code_snippets": ["# dates are easily constructed and formatted\nfrom datetime import date\nnow = date.today()\nnow\ndatetime.date(2003, 12, 2)\nnow.strftime(\"%m-%d-%y. %d %b %Y is a %A on the %d day of %B.\")\n'12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.'\n\n# dates support calendar arithmetic\nbirthday = date(1964, 7, 31)\nage = now - birthday\nage.days\n14368\n\n"]},
{"title": "7.2.2. Saving structured data with ", "url": "http://localhost:8000/tutorial/inputoutput.html#saving-structured-data-with-json", "code_snippets": ["json.dumps([1, 'simple', 'list'])\n'[1, \"simple\", \"list\"]'\n\n", "json.dump(x, f)\n\n", "x = json.load(f)\n\n"]},
{"title": "7.2. Reading and Writing Files", "url": "http://localhost:8000/tutorial/inputoutput.html#reading-and-writing-files", "code_snippets": ["f = open('workfile', 'w')\n\n"]},
{"title": "9.3.3. Instance Objects", "url": "http://localhost:8000/tutorial/classes.html#instance-objects", "code_snippets": ["x.counter = 1\nwhile x.counter < 10:\n    x.counter = x.counter * 2\nprint(x.counter)\ndel x.counter\n\n"]},
{"title": "9.3.4. Method Objects", "url": "http://localhost:8000/tutorial/classes.html#method-objects", "code_snippets": ["x.f()\n\n", "xf = x.f\nwhile True:\n    print(xf())\n\n"]},
{"title": "6.4.1. Importing * From a Package", "url": "http://localhost:8000/tutorial/modules.html#importing-from-a-package", "code_snippets": ["__all__ = [\"echo\", \"surround\", \"reverse\"]\n\n", "import sound.effects.echo\nimport sound.effects.surround\nfrom sound.effects import *\n\n"]},
{"title": "6.4.2. Intra-package References", "url": "http://localhost:8000/tutorial/modules.html#intra-package-references", "code_snippets": ["from . import echo\nfrom .. import formats\nfrom ..filters import equalizer\n\n"]},
{"title": "4.7.2. Keyword Arguments", "url": "http://localhost:8000/tutorial/controlflow.html#keyword-arguments", "code_snippets": ["def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):\n    print(\"-- This parrot wouldn't\", action, end=' ')\n    print(\"if you put\", voltage, \"volts through it.\")\n    print(\"-- Lovely plumage, the\", type)\n    print(\"-- It's\", state, \"!\")\n\n", "parrot(1000)                                          # 1 positional argument\nparrot(voltage=1000)                                  # 1 keyword argument\nparrot(voltage=1000000, action='VOOOOOM')             # 2 keyword arguments\nparrot(action='VOOOOOM', voltage=1000000)             # 2 keyword arguments\nparrot('a million', 'bereft of life', 'jump')         # 3 positional arguments\nparrot('a thousand', state='pushing up the daisies')  # 1 positional, 1 keyword\n\n", "def cheeseshop(kind, *arguments, **keywords):\n    print(\"-- Do you have any\", kind, \"?\")\n    print(\"-- I'm sorry, we're all out of\", kind)\n    for arg in arguments:\n        print(arg)\n    print(\"-\" * 40)\n    for kw in keywords:\n        print(kw, \":\", keywords[kw])\n\n", "cheeseshop(\"Limburger\", \"It's very runny, sir.\",\n           \"It's really very, VERY runny, sir.\",\n           shopkeeper=\"Michael Palin\",\n           client=\"John Cleese\",\n           sketch=\"Cheese Shop Sketch\")\n\n"]},
{"title": "5.6. Looping Techniques", "url": "http://localhost:8000/tutorial/datastructures.html#looping-techniques", "code_snippets": ["for i in reversed(range(1, 10, 2)):\n    print(i)\n\n9\n7\n5\n3\n1\n\n", "basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']\nfor f in sorted(set(basket)):\n    print(f)\n\napple\nbanana\norange\npear\n\n", "import math\nraw_data = [56.2, float('NaN'), 51.7, 55.3, 52.5, float('NaN'), 47.8]\nfiltered_data = []\nfor value in raw_data:\n    if not math.isnan(value):\n        filtered_data.append(value)\n\nfiltered_data\n[56.2, 51.7, 55.3, 52.5, 47.8]\n\n"]},
{"title": "11.5. Logging", "url": "http://localhost:8000/tutorial/stdlib2.html#logging", "code_snippets": ["import logging\nlogging.debug('Debugging information')\nlogging.info('Informational message')\nlogging.warning('Warning:config file %s not found', 'server.conf')\nlogging.error('Error occurred')\nlogging.critical('Critical error -- shutting down')\n\n"]},
{"title": "10.9. Data Compression", "url": "http://localhost:8000/tutorial/stdlib.html#data-compression", "code_snippets": ["import zlib\ns = b'witch which has which witches wrist watch'\nlen(s)\n41\nt = zlib.compress(s)\nlen(t)\n37\nzlib.decompress(t)\nb'witch which has which witches wrist watch'\nzlib.crc32(s)\n226805979\n\n"]},
{"title": "10.10. Performance Measurement", "url": "http://localhost:8000/tutorial/stdlib.html#performance-measurement", "code_snippets": ["from timeit import Timer\nTimer('t=a; a=b; b=t', 'a=1; b=2').timeit()\n0.57535828626024577\nTimer('a,b = b,a', 'a=1; b=2').timeit()\n0.54962537085770791\n\n"]},
{"title": "8.7. Predefined Clean-up Actions", "url": "http://localhost:8000/tutorial/errors.html#predefined-clean-up-actions", "code_snippets": ["for line in open(\"myfile.txt\"):\n    print(line, end=\"\")\n\n", "with open(\"myfile.txt\") as f:\n    for line in f:\n        print(line, end=\"\")\n\n"]},
{"title": "9.4. Random Remarks", "url": "http://localhost:8000/tutorial/classes.html#random-remarks", "code_snippets": ["# Function defined outside the class\ndef f1(self, x, y):\n    return min(x, x+y)\n\nclass C:\n    f = f1\n\n    def g(self):\n        return 'hello world'\n\n    h = g\n\n", "class Bag:\n    def __init__(self):\n        self.data = []\n\n    def add(self, x):\n        self.data.append(x)\n\n    def addtwice(self, x):\n        self.add(x)\n        self.add(x)\n\n"]},
{"title": "6.4. Packages", "url": "http://localhost:8000/tutorial/modules.html#packages", "code_snippets": ["import sound.effects.echo\n\n", "sound.effects.echo.echofilter(input, output, delay=0.7, atten=4)\n\n", "from sound.effects import echo\n\n", "echo.echofilter(input, output, delay=0.7, atten=4)\n\n", "from sound.effects.echo import echofilter\n\n", "echofilter(input, output, delay=0.7, atten=4)\n\n"]},
{"title": "6. Modules", "url": "http://localhost:8000/tutorial/modules.html#modules", "code_snippets": ["# Fibonacci numbers module\n\ndef fib(n):    # write Fibonacci series up to n\n    a, b = 0, 1\n    while b < n:\n        print(b, end=' ')\n        a, b = b, a+b\n    print()\n\ndef fib2(n):   # return Fibonacci series up to n\n    result = []\n    a, b = 0, 1\n    while b < n:\n        result.append(b)\n        a, b = b, a+b\n    return result\n\n", "import fibo\n\n"]},
{"title": "4.7.3. Arbitrary Argument Lists", "url": "http://localhost:8000/tutorial/controlflow.html#arbitrary-argument-lists", "code_snippets": ["def write_multiple_items(file, separator, *args):\n    file.write(separator.join(args))\n\n", "def concat(*args, sep=\"/\"):\n    return sep.join(args)\n\nconcat(\"earth\", \"mars\", \"venus\")\n'earth/mars/venus'\nconcat(\"earth\", \"mars\", \"venus\", sep=\".\")\n'earth.mars.venus'\n\n"]},
{"title": "4.7.4. Unpacking Argument Lists", "url": "http://localhost:8000/tutorial/controlflow.html#unpacking-argument-lists", "code_snippets": ["list(range(3, 6))            # normal call with separate arguments\n[3, 4, 5]\nargs = [3, 6]\nlist(range(*args))            # call with arguments unpacked from a list\n[3, 4, 5]\n\n"]},
{"title": "5.7. More on Conditions", "url": "http://localhost:8000/tutorial/datastructures.html#more-on-conditions", "code_snippets": ["string1, string2, string3 = '', 'Trondheim', 'Hammer Dance'\nnon_null = string1 or string2 or string3\nnon_null\n'Trondheim'\n\n"]},
{"title": "5.8. Comparing Sequences and Other Types", "url": "http://localhost:8000/tutorial/datastructures.html#comparing-sequences-and-other-types", "code_snippets": ["(1, 2, 3)              < (1, 2, 4)\n[1, 2, 3]              < [1, 2, 4]\n'ABC' < 'C' < 'Pascal' < 'Python'\n(1, 2, 3, 4)           < (1, 2, 4)\n(1, 2)                 < (1, 2, -1)\n(1, 2, 3)             == (1.0, 2.0, 3.0)\n(1, 2, ('aa', 'ab'))   < (1, 2, ('abc', 'a'), 4)\n\n"]},
{"title": "11.7. Tools for Working with Lists", "url": "http://localhost:8000/tutorial/stdlib2.html#tools-for-working-with-lists", "code_snippets": ["from array import array\na = array('H', [4000, 10, 700, 22222])\nsum(a)\n26932\na[1:3]\narray('H', [10, 700])\n\n", "unsearched = deque([starting_node])\ndef breadth_first_search(unsearched):\n    node = unsearched.popleft()\n    for m in gen_moves(node):\n        if is_goal(m):\n            return m\n        unsearched.append(m)\n\n", "import bisect\nscores = [(100, 'perl'), (200, 'tcl'), (400, 'lua'), (500, 'python')]\nbisect.insort(scores, (300, 'ruby'))\nscores\n[(100, 'perl'), (200, 'tcl'), (300, 'ruby'), (400, 'lua'), (500, 'python')]\n\n", "from heapq import heapify, heappop, heappush\ndata = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\nheapify(data)                      # rearrange the list into heap order\nheappush(data, -5)                 # add a new entry\n[heappop(data) for i in range(3)]  # fetch the three smallest entries\n[-5, 0, 1]\n\n"]},
{"title": "10.11. Quality Control", "url": "http://localhost:8000/tutorial/stdlib.html#quality-control", "code_snippets": ["def average(values):\n    \"\"\"Computes the arithmetic mean of a list of numbers.\n\n    >>> print(average([20, 30, 70]))\n    40.0\n    \"\"\"\n    return sum(values) / len(values)\n\nimport doctest\ndoctest.testmod()   # automatically validate the embedded tests\n\n", "import unittest\n\nclass TestStatisticalFunctions(unittest.TestCase):\n\n    def test_average(self):\n        self.assertEqual(average([20, 30, 70]), 40.0)\n        self.assertEqual(round(average([1, 5, 7]), 1), 4.3)\n        with self.assertRaises(ZeroDivisionError):\n            average([])\n        with self.assertRaises(TypeError):\n            average(20, 30, 70)\n\nunittest.main()  # Calling from the command line invokes all tests\n\n"]},
{"title": "9.6. Private Variables", "url": "http://localhost:8000/tutorial/classes.html#private-variables", "code_snippets": ["class Mapping:\n    def __init__(self, iterable):\n        self.items_list = []\n        self.__update(iterable)\n\n    def update(self, iterable):\n        for item in iterable:\n            self.items_list.append(item)\n\n    __update = update   # private copy of original update() method\n\nclass MappingSubclass(Mapping):\n\n    def update(self, keys, values):\n        # provides new signature for update()\n        # but does not break __init__()\n        for item in zip(keys, values):\n            self.items_list.append(item)\n\n"]},
{"title": "4.7.5. Lambda Expressions", "url": "http://localhost:8000/tutorial/controlflow.html#lambda-expressions", "code_snippets": ["def make_incrementor(n):\n    return lambda x: x + n\n\nf = make_incrementor(42)\nf(0)\n42\nf(1)\n43\n\n", "pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]\npairs.sort(key=lambda pair: pair[1])\npairs\n[(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]\n\n"]},
{"title": "11.8. Decimal Floating Point Arithmetic", "url": "http://localhost:8000/tutorial/stdlib2.html#decimal-floating-point-arithmetic", "code_snippets": ["from decimal import *\nround(Decimal('0.70') * Decimal('1.05'), 2)\nDecimal('0.74')\nround(.70 * 1.05, 2)\n0.73\n\n", "Decimal('1.00') % Decimal('.10')\nDecimal('0.00')\n1.00 % 0.10\n0.09999999999999995\n\nsum([Decimal('0.1')]*10) == Decimal('1.0')\nTrue\nsum([0.1]*10) == 1.0\nFalse\n\n", "getcontext().prec = 36\nDecimal(1) / Decimal(7)\nDecimal('0.142857142857142857142857142857142857')\n\n"]},
{"title": "9.7. Odds and Ends", "url": "http://localhost:8000/tutorial/classes.html#odds-and-ends", "code_snippets": ["class Employee:\n    pass\n\njohn = Employee()  # Create an empty employee record\n\n# Fill the fields of the record\njohn.name = 'John Doe'\njohn.dept = 'computer lab'\njohn.salary = 1000\n\n"]},
{"title": "9.8. Iterators", "url": "http://localhost:8000/tutorial/classes.html#iterators", "code_snippets": ["for element in [1, 2, 3]:\n    print(element)\nfor element in (1, 2, 3):\n    print(element)\nfor key in {'one':1, 'two':2}:\n    print(key)\nfor char in \"123\":\n    print(char)\nfor line in open(\"myfile.txt\"):\n    print(line, end='')\n\n", "class Reverse:\n    \"\"\"Iterator for looping over a sequence backwards.\"\"\"\n    def __init__(self, data):\n        self.data = data\n        self.index = len(data)\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.index == 0:\n            raise StopIteration\n        self.index = self.index - 1\n        return self.data[self.index]\n\n"]},
{"title": "9.9. Generators", "url": "http://localhost:8000/tutorial/classes.html#generators", "code_snippets": ["def reverse(data):\n    for index in range(len(data)-1, -1, -1):\n        yield data[index]\n\n", "for char in reverse('golf'):\n    print(char)\n\nf\nl\no\ng\n\n"]},
{"title": "9.10. Generator Expressions", "url": "http://localhost:8000/tutorial/classes.html#generator-expressions", "code_snippets": ["sum(i*i for i in range(10))                 # sum of squares\n285\n\nxvec = [10, 20, 30]\nyvec = [7, 5, 3]\nsum(x*y for x,y in zip(xvec, yvec))         # dot product\n260\n\nfrom math import pi, sin\nsine_table = {x: sin(x*pi/180) for x in range(0, 91)}\n\nunique_words = set(word  for line in page  for word in line.split())\n\nvaledictorian = max((student.gpa, student.name) for student in graduates)\n\ndata = 'golf'\nlist(data[i] for i in range(len(data)-1, -1, -1))\n['f', 'l', 'o', 'g']\n\n"]}
]
